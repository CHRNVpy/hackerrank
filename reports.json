[
{
    "test_id": "1510939",
    "candidate_test_id": "49170627",
    "question_1": {
        "score": "51/75",
        "code_language": "Kotlin",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfun getMinLength(a: Array<Int>, k: Int): Int {\n    // Write your code here\n    var count = 0\n    \n    var last = a[0]\n    for (i in 1 .. a.lastIndex) {\n        val prod = last * a[i]\n        if (prod <= k) {\n            count++\n            last = prod\n        } else {\n            last = a[i]\n        }\n    }\n    \n    return a.size - count\n}"
    },
    "question_2": {
        "score": "72/100",
        "code_language": "Kotlin",
        "candidate_code": "import java.io.*\nimport java.math.*\nimport java.security.*\nimport java.text.*\nimport java.util.*\nimport java.util.concurrent.*\nimport java.util.function.*\nimport java.util.regex.*\nimport java.util.stream.*\nimport kotlin.collections.*\nimport kotlin.comparisons.*\nimport kotlin.io.*\nimport kotlin.jvm.*\nimport kotlin.jvm.functions.*\nimport kotlin.jvm.internal.*\nimport kotlin.ranges.*\nimport kotlin.sequences.*\nimport kotlin.text.*\n\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nprivate val vowels = setOf('a', 'i', 'u', 'e', 'o')\n\nfun stringProblem(s: String): Long {\n    // Write your code here\n    var count = 0L\n    var size = s.length\n    val sets = mutableSetOf<Char>()\n    \n    for (i in 0 .. size - 4) {\n        sets.clear()\n        for (j in i .. size -1) {\n            val char = s[j]\n            if (char !in vowels) break\n            if (char in vowels) {\n                sets.add(char)\n                if(sets.size == 5) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}fun main(args: Array<String>) {\n    val s = readLine()!!\n\n    val result = stringProblem(s)\n\n    println(result)\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49272112",
    "question_1": {
        "score": "0/75",
        "candidate_code": "No attempts"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49219581",
    "question_1": {
        "score": "0/75",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    var_dump($a);\n    var_dump($k);\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "PHP",
        "candidate_code": "<?php\n\n\n\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem($s) {\n    $str = explode(\"\", $s);\n    \n}\n\n$fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$s = rtrim(fgets(STDIN), \"\\r\\n\");\n\n$result = stringProblem($s);\n\nfwrite($fptr, $result . \"\\n\");\n\nfclose($fptr);\n\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49216054",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "<?php\n\n\n\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem($s) {\n    $str = explode(\"\", $s);\n    \n}\n\n$fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$s = rtrim(fgets(STDIN), \"\\r\\n\");\n\n$result = stringProblem($s);\n\nfwrite($fptr, $result . \"\\n\");\n\nfclose($fptr);\n\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49172775",
    "question_1": {
        "score": "75/75",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k):\n    i = 0 \n    while i < len(a) - 1:\n        if a[i] * a[i+1] <= k:\n            a[i] = a[i] * a[i+1]\n            a.pop(i+1)\n        else:\n            i += 1\n    return len(a)\n"
    },
    "question_2": {
        "score": "12/100",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'stringProblem' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef stringProblem(s):\n    vowels = set(['a','e','i','o','u'])\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if set(s[i:j+1]).issubset(vowels) and len(set(s[i:j+1])) == 5:\n                count += 1\n    return count"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49181709",
    "question_1": {
        "score": "59/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let minLength = a.length;\n    \n    for (let i = 0; i < a.length; i++) {\n        let length = a.length;\n        \n        for (let j = i + 1; j < a.length; j++) {\n            if ( a[j] * a[j - 1] <= k) {\n                a[j-1] = a[j] * a[j-1];\n                a.splice(j,1);\n                j--;\n                length--;\n            }\n        }\n        minLength = Math.min(minLength, length);\n    }\n    return minLength;\n}\n"
    },
    "question_2": {
        "score": "32/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let minLength = a.length;\n    \n    for (let i = 0; i < a.length; i++) {\n        let length = a.length;\n        \n        for (let j = i + 1; j < a.length; j++) {\n            if ( a[j] * a[j - 1] <= k) {\n                a[j-1] = a[j] * a[j-1];\n                a.splice(j,1);\n                j--;\n                length--;\n            }\n        }\n        minLength = Math.min(minLength, length);\n    }\n    return minLength;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49192043",
    "question_1": {
        "score": "0/75",
        "code_language": "C",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nint getMinLength(int a_count, int* a, int k) {\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "C",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nint getMinLength(int a_count, int* a, int k) {\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49293712",
    "question_1": {
        "score": "0/75",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nint getMinLength(int a_count, int* a, int k) {\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s: String) -> Int {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49559227",
    "question_1": {
        "score": "0/75",
        "code_language": "PHP",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    // Write your code here\n\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "PHP",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem($s) {\n    $array = str_split($s);\n    $result = [];\n    foreach($array as $item){\n        if(preg_match('/^[aiueo]/',$item)){\n            array_push($result,$item);\n        }\n        \n    }\n    \n     $results = array_unique($result);\n     return implode($result);\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49319687",
    "question_1": {
        "score": "5/75",
        "code_language": "Typescript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a: number[], k: number): number {\n    \n    for (var i = 0; i < a.length; i++) {\n        if (a[i] == null) return; \n        \n        if (a[i] * a[i + 1] < k) {\n            a[i] = a[i] * a[i + 1];            \n        } else {\n            continue;\n        }\n    }\n    \n    return a.length;\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Typescript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s: string): number {\n    let count = 0;\n    let vowels = ['a', 'i', 'u', 'e' ,'0'];\n    \n    s.split(\"\").forEach(\n        (element) => {\n            if (vowels.includes(element)) count++\n        }\n    );\n    return count;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49590739",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    var o, p, q;\n    var min = Array(k+1).fill(Array(k+1).fill(-1));\n    var min_ = Array(k).fill(0);\n    \n    for (var size = 1; size <= n; size++) {\n        for (i = 0; i < n - size + 1; i++) {\n            j = i + size - 1;\n            \n            if (i == j)\n            min[i][j] = a[i];\n            else {\n                for (k = i; k < j; k++) {\n                    if (min[i][j])\n                }\n            }\n        }\n    }\n}"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49234054",
    "question_1": {
        "score": "0/75",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k):\n    list_num = a\n    while True:\n        front = list_num[0]*list_num[len(list_num)-1]\n        if front <= k:\n            \n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49338794",
    "question_1": {
        "score": "51/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\nlet changed = true\nwhile(changed){\n    changed =false\n    for(let i =0 ; i < a.length - 1; i++){\n        \n        if(a[i] * a[i + 1] <= k){\n            a.splice(i, 2, a[i] * a[i + 1])\n            changed = true\n            break;\n        }\n    }\n}\nreturn a.length\n}\n"
    },
    "question_2": {
        "score": "12/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n    let vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n    let count = 0;\n    for (let i =0; i < s.length; i++){\n       if(vowels.has(s[i])){\n            for (let j = i; j < s.length; j++){\n            let substring = s.substring(i, j+1);\n            if(substring.split('').every(c => vowels.has(c)) && vowels.size == new Set(substring.split('')).size){\n                count ++\n            }\n        }\n       }\n    }\nreturn count\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49233837",
    "question_1": {
        "score": "11/75",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n    let vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n    let count = 0;\n    for (let i =0; i < s.length; i++){\n       if(vowels.has(s[i])){\n            for (let j = i; j < s.length; j++){\n            let substring = s.substring(i, j+1);\n            if(substring.split('').every(c => vowels.has(c)) && vowels.size == new Set(substring.split('')).size){\n                count ++\n            }\n        }\n       }\n    }\nreturn count\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Go",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    n := int32(len(a))\n    size := n\n    for i := int32(0); i < n-1; i++ {\n        if a[i]*a[i+1] <= k {\n            a[i+1] = a[i]*a[i+1]\n            size--\n            i--\n            n--\n        }\n    }\n    return size\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49540733",
    "question_1": {
        "score": "31/75",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n \n// PLEASE GOD, GIVE ME THIS \n// JOB, AAMIIN\n// i need this job :(\nfunc getMinLength(a []int32, k int32) int32 {\n    return int32(len(collapsing(a, k)))\n}\n\n// set safe recuresive function\nfunc collapsing(nums []int32, max int32) []int32 {\n    // set result storage\n    res := make([]int32, 0)\n    // loop and count\n    for i := 0; i < len(nums); i++ {\n        // typely safe i+1 (i < len(nums)-1)\n        // so we can check i+1\n        if i < len(nums)-1 && nums[i]*nums[i+1] <= max {\n            // append value to result\n            res = append(res, nums[i]*nums[i+1])\n            // skiping i+1 (after this)\n            i++\n            continue\n        }\n        // add value without *\n        res = append(res, nums[i])\n    }\n    \n    // check if this the final \n    // result or not, if not\n    // continue recursively\n    if len(nums) == len(res) {\n        return res\n    }\n    \n    return collapsing(res, max)\n}\n"
    },
    "question_2": {
        "score": "12/100",
        "code_language": "Go",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n \n// PLEASE GOD, GIVE ME THIS \n// JOB, AAMIIN\n// i need this job :(\nfunc stringProblem(s string) int64 {\n\n    // use HashMap\n    hash := map[byte]bool {\n        'a': true, 'e': true, 'i': true, 'o': true, 'u': true,\n    }\n    // set counter for 5 or more\n    // set result res\n    counter := 0\n    var res int64\n    // loop the string s\n    for i := 0; i < len(s); i++ {\n        // checking byte in hashMap\n        _, ok := hash[s[i]]\n        if ok {\n            counter++\n            if counter >= 5 {\n                res++\n            }\n        } else if !ok {\n            counter = 0\n        }\n    }\n    \n    return res\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49329342",
    "question_1": {
        "score": "75/75",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    $result = [];\n    $z = 0;\n    foreach ($a as $l => $n) {\n        if ($l < count($a)) {\n            if (!$z) {\n                $z = $n;\n            } else {\n                if (($z * $n) <= $k) {\n                    $z = $z * $n;\n                } else {\n                    $result[] = $z;\n                    $z = $n;\n                }\n            }\n        }\n    }\n    $result[] = $z;\n    \n    return count($result);\n}\n"
    },
    "question_2": {
        "score": "12/100",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem($s) {\n    $result = [];\n    $tempData = [];\n    $n = strlen($s);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i; $j < $n; $j++) {\n            if (!isVowel($s[$j])) {\n                break;\n            }\n            \n            $tempData[] = $s[$j];\n            \n            if (count($tempData) ==5) {\n                $result[] = implode(\"\", $tempData);\n            }\n        }\n        $tempData = [];\n    }\n\n    return count($result);\n}\n\nfunction isVowel($t) {\n    return in_array($t, [\"a\", \"i\", \"u\", \"e\", \"o\"]);\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49352830",
    "question_1": {
        "score": "51/75",
        "code_language": "Kotlin",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfun getMinLength(a: Array<Int>, k: Int): Int {\n    var leftPointer = 0\n    var rightPointer = 1\n    \n    while(leftPointer < a.size && rightPointer < a.size) {\n        if(a[leftPointer] * a[rightPointer] <= k) {\n            a[leftPointer] = a[leftPointer] * a[rightPointer]\n            rightPointer++\n        } else {\n            leftPointer++\n            if(leftPointer != rightPointer) {\n                a[leftPointer] = a[rightPointer]\n            }\n            rightPointer++\n        }\n    }\n    \n    return leftPointer + 1\n}"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "Kotlin",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfun getMinLength(a: Array<Int>, k: Int): Int {\n    var leftPointer = 0\n    var rightPointer = 1\n    \n    while(leftPointer < a.size && rightPointer < a.size) {\n        if(a[leftPointer] * a[rightPointer] <= k) {\n            a[leftPointer] = a[leftPointer] * a[rightPointer]\n            rightPointer++\n        } else {\n            leftPointer++\n            if(leftPointer != rightPointer) {\n                a[leftPointer] = a[rightPointer]\n            }\n            rightPointer++\n        }\n    }\n    \n    return leftPointer + 1\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49282045",
    "question_1": {
        "score": "0/75",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n    result := []int32{}\n    for i, _ := range a {\n        if i <= len(a) - 2 {\n            j := i + 1\n            if a[i] * a[j] > k {\n                continue\n            }\n            result = append(result, a[i] * a[j])   \n        }\n    }\n    return int32(len(result))\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49466410",
    "question_1": {
        "score": "43/75",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    // Write your code here\n    $new_array = [];\n    do{\n        print_r($a);\n        if($a[0]*$a[1]>$k){\n            array_push($new_array,$a[0]);\n        }else{\n            $a[1]=$a[0]*$a[1];\n        }\n        array_shift($a);\n    }\n    while(count($a)!=1);\n    return count($new_array)+1;\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    // Write your code here\n    $new_array = [];\n    do{\n        print_r($a);\n        if($a[0]*$a[1]>$k){\n            array_push($new_array,$a[0]);\n        }else{\n            $a[1]=$a[0]*$a[1];\n        }\n        array_shift($a);\n    }\n    while(count($a)!=1);\n    return count($new_array)+1;\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49284276",
    "question_1": {
        "score": "43/75",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n  // Write your code here\n  i := 0\n  for i < len(a) {\n    if i <= len(a) - 2 {\n      mul := a[i] * a[i+1]\n      if mul > k {\n        i++\n        continue\n      }\n      a = append(a[:i], a[i+1:]...)\n      a = append(a[:i], a[i+1:]...)\n      a = append(a[:i+1], a[i:]...)\n      a[i] = mul\n      fmt.Println(a)\n      i = 0\n      continue\n    }\n    i++\n  }\n\n  return int32(len(a))\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n  // Write your code here\n  i := 0\n  for i < len(a) {\n    if i <= len(a) - 2 {\n      mul := a[i] * a[i+1]\n      if mul > k {\n        i++\n        continue\n      }\n      a = append(a[:i], a[i+1:]...)\n      a = append(a[:i], a[i+1:]...)\n      a = append(a[:i+1], a[i:]...)\n      a[i] = mul\n      fmt.Println(a)\n      i = 0\n      continue\n    }\n    i++\n  }\n\n  return int32(len(a))\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49370582",
    "question_1": {
        "score": "0/75",
        "code_language": "Java8",
        "candidate_code": "\nclass Result {\n\n    /*\n     * Complete the 'getMinLength' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY a\n     *  2. INTEGER k\n     */\n\n    public static int getMinLength(List<Integer> a, int n) {\n    \n        \n        int [][]dp = new int[n+1] [n+1];\n        int []dp1 = new int[n];\n        \n        int i,j,k;\n        \n        for (i = 0; i<n+1; i++) {\n            for (j = 0; j < n + 1; j++) {\n                dp[i][j] = -1;\n            }\n        }\n        \n        for (int size = 1; size <= n; size++) {\n            for (i = 0; i< n - size ; i++) {\n                j = i + size;\n                if (i == j) {\n                    dp[i][j] = a.get(i);\n                } else {\n                    for (k = i; k < j; k++) {\n                        if (dp[i][k] != -1 && dp[i][k] == dp[k+1][j]) {\n                            dp[i][j] = dp[i][k] + 1;\n                        }\n                    }\n                }\n            }\n        }\n        \n        for (i = 0; i < n; i++) {\n            dp1[i] = (int) 1e7;\n        }\n        \n        for (i = 0; i < n; i++) {\n            for (j = 0; j <= i; j++) {\n                if (dp[j][i] != -1) {\n                    if (j==0) {\n                        dp1[i] = 1;\n                    } else {\n                        dp1[i] = Math.min(dp1[i], dp1[j-1]+1);\n                    }\n                }\n            }\n        }\n        \n        return dp1[n-1];\n\n    }\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Java8",
        "candidate_code": "\nclass Result {\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n\n    public static long stringProblem(String s) {\n    // Write your code here\n    long count = 0;\n    for (char c : s.toCharArray()) {\n        if (\"aeiou\".indexOf(c) >= 0) {\n            count++;\n        }\n    }\n    \n    return count;\n\n    }\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49363309",
    "question_1": {
        "score": "51/75",
        "code_language": "Kotlin",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfun getMinLength(a: Array<Int>, k: Int): Int{\n    var count = 0\n    var lastBiggest = 0\n    for(i in 0..(a.size - 2)){\n        if(lastBiggest == 0){\n            if(a[i] * a[i+1] <= k){\n                lastBiggest = a[i] * a[i + 1]\n                count++\n            }\n        } else {\n            if(lastBiggest * a[i + 1] <= k){\n                lastBiggest = a[i+1] * lastBiggest\n                count++\n            } else {\n                lastBiggest = 0\n            }\n        }\n    }\n    return a.size - count\n}\n"
    },
    "question_2": {
        "score": "72/100",
        "code_language": "Kotlin",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfun stringProblem(s: String): Long {\n    var vowels = \"aeiou\"\n    var c = 0\n    for(i in s.indices){\n        val sb = StringBuilder()\n        for(j in i..s.lastIndex){\n            if(s[j] in vowels){\n                sb.append(s[j])\n                if(vowels.all { it in sb}) c++\n            } else {\n                break\n            }\n        }\n    }\n    return c.toLong()\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49374216",
    "question_1": {
        "score": "75/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    \n    var sum = a[0];\n    var minLength = a.length;\n    for (var i = 1; i < a.length; i++ ) {\n        sum = sum * a[i];\n        if (sum > k) {\n            sum = a[i];\n            continue;\n        }\n        minLength--;\n    }\n    return minLength;\n}\n"
    },
    "question_2": {
        "score": "12/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    \n    var sum = a[0];\n    var minLength = a.length;\n    for (var i = 1; i < a.length; i++ ) {\n        sum = sum * a[i];\n        if (sum > k) {\n            sum = a[i];\n            continue;\n        }\n        minLength--;\n    }\n    return minLength;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49320841",
    "question_1": {
        "score": "0/75",
        "code_language": "Java8",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    \n    var sum = a[0];\n    var minLength = a.length;\n    for (var i = 1; i < a.length; i++ ) {\n        sum = sum * a[i];\n        if (sum > k) {\n            sum = a[i];\n            continue;\n        }\n        minLength--;\n    }\n    return minLength;\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49510035",
    "question_1": {
        "score": "13/75",
        "code_language": "JavaScript",
        "candidate_code": "\nclass Result {\n\n    /*\n     * Complete the 'getMinLength' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY a\n     *  2. INTEGER k\n     */\n\n    public static int getMinLength(List<Integer> a, int k) {\n    int [][]dp = new int[ + 1][n + 1];\n    int []dp1 = new int[n];\n    int i, j, k;\n  \n    // Initialising the dp table by -1\n    for (i = 0; i < n + 1; i++) {\n        for (j = 0; j < n + 1; j++) {\n            dp[i][j] = -1;\n        }\n    }\n  \n    for (int size = 1; size <= n; size++) {\n        for (i = 0; i < n - size + 1; i++) {\n            j = i + size - 1;\n  \n            // base case\n            if (i == j)\n                dp[i][j] = a[i];\n            else {\n                for (k = i; k < j; k++) {\n  \n                    // Check if the two subarray\n                    // can be combined\n                    if (dp[i][k] != -1\n                        && dp[i][k] == dp[k + 1][j])\n  \n                        dp[i][j] = dp[i][k] + 1;\n                }\n            }\n        }\n    }\n  \n    // Initialising dp1 table with max value\n    for (i = 0; i < n; i++)\n        dp1[i] = (int) 1e7;\n  \n    for (i = 0; i < n; i++) {\n        for (j = 0; j <= i; j++) {\n  \n            // Check if the subarray can be\n            // reduced to a single element\n            if (dp[j][i] != -1) {\n                if (j == 0)\n                    dp1[i] = 1;\n  \n                // Minimal partition\n                // of [1: j-1] + 1\n                else\n                    dp1[i] = Math.min(\n                        dp1[i],\n                        dp1[j - 1] + 1);\n            }\n        }\n    }\n  \n    return dp1[n - 1];\n\n    }\n\n}\n"
    },
    "question_2": {
        "score": "100/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction isVowels(s) {\n    return (s == 'a' || s == 'i' || s == 'u' || s == 'e' || s == 'o');\n}\n\nfunction countSubstring(s) {\n    let count = 0;\n    \n    let mp = {};\n    \n    let n = s.length;\n    \n    let startIndex = 0;\n    \n    for(let i = 0; i < n; i++) {\n        if(mp[s[i]]) {\n            mp[s[i]]++;\n        } else {\n            mp[s[i]] = 1;\n            \n            while(mp['a'] > 0 && mp['e'] > 0 && mp['i'] > 0 && mp['u'] > 0 && mp['o'] > 0) {\n                count += n - i;\n                mp[s[startIndex]]--;\n                startIndex++;\n            }\n        }\n    }\n    \n    return count;\n}\n\nfunction stringProblem(s) {\n    // Write your code here\n    let count = 0;\n    let arrStr = s.split('');\n    let newArr = [];\n    \n    let str = '';\n    \n    for(let i = 0; i <= arrStr.length; i++) {\n        if(isVowels(arrStr[i])) {\n            str += arrStr[i];\n        } else {\n            if(str.length > 0) {\n                count += countSubstring(str);\n            }\n            str = '';\n        }\n    }\n    \n    return count;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49375324",
    "question_1": {
        "score": "67/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction isVowels(s) {\n    return (s == 'a' || s == 'i' || s == 'u' || s == 'e' || s == 'o');\n}\n\nfunction countSubstring(s) {\n    let count = 0;\n    \n    let mp = {};\n    \n    let n = s.length;\n    \n    let startIndex = 0;\n    \n    for(let i = 0; i < n; i++) {\n        if(mp[s[i]]) {\n            mp[s[i]]++;\n        } else {\n            mp[s[i]] = 1;\n            \n            while(mp['a'] > 0 && mp['e'] > 0 && mp['i'] > 0 && mp['u'] > 0 && mp['o'] > 0) {\n                count += n - i;\n                mp[s[startIndex]]--;\n                startIndex++;\n            }\n        }\n    }\n    \n    return count;\n}\n\nfunction stringProblem(s) {\n    // Write your code here\n    let count = 0;\n    let arrStr = s.split('');\n    let newArr = [];\n    \n    let str = '';\n    \n    for(let i = 0; i <= arrStr.length; i++) {\n        if(isVowels(arrStr[i])) {\n            str += arrStr[i];\n        } else {\n            if(str.length > 0) {\n                count += countSubstring(str);\n            }\n            str = '';\n        }\n    }\n    \n    return count;\n}\n"
    },
    "question_2": {
        "score": "12/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n    let vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n    let count = 0;\n   for (let i = 0; i < s.length; i++){\n       for(let j = i; j < s.length ; j++){\n           let substring = s.substring(i,j+1)\n           if(substring.split('').every(c => vowels.has(c)) && vowels.size === new Set(substring.split('')).size){\n               count ++\n           }\n       }\n   }\nreturn count\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49355316",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    \n}\n"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n    let count = 0\n    let vowels = \"aeiou\"\n    let currVowel = \"\";\n    for (let char of s) {\n        console.log(char)\n        if (vowels.includes(char)) {\n            if (currVowel === \"\") {\n                count++;\n                currVowel = char\n            }\n        }\n        if (!vowels.includes(char)) currVowel = \"\"\n    }\n    return count;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49410531",
    "question_1": {
        "score": "2/75",
        "code_language": "Java8",
        "candidate_code": "class Result {\n\n    /*\n     * Complete the 'getMinLength' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY a\n     *  2. INTEGER k\n     */\n\n    public static int getMinLength(List<Integer> a, int k) {\n    // Write your code here\n    int result = 0;\n        for (int i=0 ; i< a.size() ; i++){\n            if(i != a.size()-1){\n                if(a.get(i) * a.get(i+1) <= k){\n                    result++;\n                    a.set(i+1,a.get(i) * a.get(i+1)) ;\n                    a.remove(i);\n                    i++;\n                }\n            }\n        }\n    return result;\n    }\n\n}"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "Java8",
        "candidate_code": "class Result {\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n\n    public static long stringProblem(String s) {\n    // Write your code here\n        long a = 0 ;\n        for(int i=0 ; i < s.length() ; i++){\n            //need extra time\n            a=2;\n        }\n        \n        return a;\n    }\n\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49428980",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49434718",
    "question_1": {
        "score": "0/75",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k):\n    # array1 = np.array[100 200, 300, 400, 500, 600])\n    print(\"Dimensi Array :\" , array1.ndim)\n    print(\"Jumlah Array : \", array1.shape)\n    print(\"Nilai: \", array1)\n    print(\"Nilai ke-3 :\", array1[3])\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "C++",
        "candidate_code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n\n\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nlong stringProblem(string s) {\n    printf(\"Program Cek Huruf Vokal dan Konsonan\\n\");\n    \n    \n    char karakter;\n    int CekHurufVokal;\n    \n    printf(\"Masukan suatu alfabet : \");\n    scanf(\"%c\", &karakter);\n    \n    CekHurufVokal = (\n        karakter == 'a' || karakter == 'A' ||\n        karakter == 'e' || karakter == 'E' ||\n        karakter == 'i' || karakter == 'I' ||\n        karakter == 'o' || karakter == 'O' ||\n        karakter == 'u' || karakter == 'U' ||\n    );\n    \n    if (CekHurufVokal){\n        printf(\"Huruf %c adalah vokal.\", karakter);\n    }else{\n        printf(\"Huruf %c adalah konsonan.\", karakter);\n    }\n}\n    printf(\"\\n\\n\");\nint main()\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49556719",
    "question_1": {
        "score": "5/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let len = a.length\n    let min_len = a.length + 1\n    \n    for(let start=0;start<len;start++){\n        let curr_sum = a[start]\n        \n        if(curr_sum >= k) return 1\n        \n        for(let end=start+1;end<len;end++){\n            curr_sum += a[end]\n            \n            if(curr_sum > k && (end-start+1)<min_len)\n                min_len = (end-start+1)\n        }\n    }\n    return min_len\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49509597",
    "question_1": {
        "score": "51/75",
        "code_language": "java15",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let len = a.length\n    let min_len = a.length + 1\n    \n    for(let start=0;start<len;start++){\n        let curr_sum = a[start]\n        \n        if(curr_sum >= k) return 1\n        \n        for(let end=start+1;end<len;end++){\n            curr_sum += a[end]\n            \n            if(curr_sum > k && (end-start+1)<min_len)\n                min_len = (end-start+1)\n        }\n    }\n    return min_len\n}\n"
    },
    "question_2": {
        "score": "72/100",
        "code_language": "java15",
        "candidate_code": "class Result {\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n\n    public static long stringProblem(String s) {\n    // Write your code here\n        List<Character> chars = List.of('a', 'e', 'i', 'o', 'u');\n        Set<Character> foundV = new HashSet<>();\n        int total = 0;\n        for(int i = 0; i < s.length(); i++){\n            foundV = new HashSet<>();\n            for(int j = i; j < s.length(); j++){\n                char c = s.charAt(j);\n                if(!chars.contains(c)){\n                    if(!(foundV.size() == 5) ){\n                        i = j;\n                    }\n                    break; \n                } else {\n                    foundV.add(c);\n                    if(foundV.size() == 5){\n                        total++;\n                    }\n                }\n            }\n        }\n        return total;\n\n    }\n\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49577795",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let arr = []\n    for( let i = 0; i < a.length; i++){\n        let merge = a[i]*a[i+1]\n        merge < k ? arr.push(merge): false   \n    }\n    return arr.length;\n\n}"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n    let pattern = /aeiou/gm;\n    return s.match(pattern).length\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49562350",
    "question_1": {
        "score": "0/75",
        "code_language": "C#",
        "candidate_code": "using System.CodeDom.Compiler;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Runtime.Serialization;\nusing System.Text.RegularExpressions;\nusing System.Text;\nusing System;\n\n\n\nclass Result\n{\n\n    /*\n     * Complete the 'getMinLength' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY a\n     *  2. INTEGER k\n     */\n\n    public static int getMinLength(List<int> a, int k)\n    {\n        int least, second_least, min_operations = 0, new_ele = 0, flag = 0;\n        List<int> heap = new List<int>();\n        \n        for (int i = 0; i < a.Count; i++) {\n            heap.Add(a[i]);\n        }\n        heap.Sort();\n        heap.Reverse();\n        \n        while (heap.Count != 1) {\n            if(heap[heap.Count] <= k) {\n                flag = 1;\n                break;\n            }\n            \n            least = heap[heap.Count - 1];\n            heap.RemoveAt(heap.Count - 1);\n            second_least = heap[heap.Count - 1];\n            heap.RemoveAt(heap.Count - 1);\n            new_ele = (1 * least) + (2 * second_least);\n            min_operations++;\n            heap.Add(new_ele);\n            heap.Sort();\n            heap.Reverse();\n        }\n        \n        if(heap[heap.Count - 1] <= k){\n            flag = 1;\n        }\n        if(flag == 1) {\n            return min_operations;\n        }\n        \n        return -1;\n    }\n\n}\n\nclass Solution\n{\n    public static void Main(string[] args)\n    {\n        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\"), true);\n\n        int aCount = Convert.ToInt32(Console.ReadLine().Trim());\n\n        List<int> a = new List<int>();\n    \n        for (int i = 0; i < aCount; i++)\n        {\n            int aItem = Convert.ToInt32(Console.ReadLine().Trim());\n            a.Add(aItem);\n        }\n\n        int k = Convert.ToInt32(Console.ReadLine().Trim());\n\n        int result = Result.getMinLength(a, k);\n\n        textWriter.WriteLine(result);\n\n        textWriter.Flush();\n        textWriter.Close();\n    }\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "C#",
        "candidate_code": "\nclass Result\n{\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n     \n    public static bool isVowel(char x) {\n        return (x == 'a' || x == 'e' || x == 'i' || x == 'u' || x == 'o');\n    }\n\n    public static long stringProblem(string s)\n    {\n        HashSet<char> hash = new HashSet<char>();\n        \n        int start = 0, total = 0;\n        for (int i = 0;i < s.Length; i++) {\n            if (isVowel(s[i]) == true) {\n                hash.Add(s[i]);\n                \n                if(hash.Count == 5){\n                    TextWriter.Write(s.Substring(start, (i + 1) - start) + \" \");\n                }\n                \n                total++;\n            } else {\n                start = i + 1;\n                hash.Clear();\n            }\n        }\n    }\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49547944",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\n    var output = 0;\nfunction stringProblem(s) {\n    // Write your code here\n    var s = 'aeioaexaaeuiou'.split('x');\n    var counter = 0;\n    var str = [];\n    for(let i = 0 ; i < s.length ; i++){\n        console.log('s[i]: ' + s[i]);\n        startCount(s[i]);\n    }\n    console.log(output);\n}\n\nfunction startCount(tempstr){\n    var next = 0, prev = 0;\n    var maxnext = 5, maxprev = tempstr.length;\n    var checkstr = '';\n    var vowel = ['a','e','i','o','u'];\n    for(let i = 0; i < tempstr.length ; i++){\n        \n    }\n    \n    let i = 0, finished = false;\n                console.log(\"maxprev: \" + maxprev);\n    while(!finished){\n        prev++;\n        checkstr += tempstr[i];\n        if(prev == maxprev) {\n            console.log(checkstr);\n            // if(vowel.every(str => checkstr.includes(str))) output++;\n                console.log(\"maxprev: \" + maxprev);\n                console.log(\"maxnext: \" + maxnext);\n            if(maxprev > maxnext) {\n            console.log('function 1');                \n                checkstr = '';\n                maxprev--;\n                i = next;\n                prev = next;\n            } else if(maxprev == maxnext) {\n            console.log('function 2');\n                if(maxprev == (tempstr.length - 1)) {\n                    finished = true;\n                    console.log('finished');\n                }\n                checkstr = '';\n                maxprev = tempstr.length;\n                next++;\n                i = next;\n                prev = next;\n            } \n        }\n        i++;\n    }\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49498938",
    "question_1": {
        "score": "5/75",
        "code_language": "Java8",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\n    var output = 0;\nfunction stringProblem(s) {\n    // Write your code here\n    var s = 'aeioaexaaeuiou'.split('x');\n    var counter = 0;\n    var str = [];\n    for(let i = 0 ; i < s.length ; i++){\n        console.log('s[i]: ' + s[i]);\n        startCount(s[i]);\n    }\n    console.log(output);\n}\n\nfunction startCount(tempstr){\n    var next = 0, prev = 0;\n    var maxnext = 5, maxprev = tempstr.length;\n    var checkstr = '';\n    var vowel = ['a','e','i','o','u'];\n    for(let i = 0; i < tempstr.length ; i++){\n        \n    }\n    \n    let i = 0, finished = false;\n                console.log(\"maxprev: \" + maxprev);\n    while(!finished){\n        prev++;\n        checkstr += tempstr[i];\n        if(prev == maxprev) {\n            console.log(checkstr);\n            // if(vowel.every(str => checkstr.includes(str))) output++;\n                console.log(\"maxprev: \" + maxprev);\n                console.log(\"maxnext: \" + maxnext);\n            if(maxprev > maxnext) {\n            console.log('function 1');                \n                checkstr = '';\n                maxprev--;\n                i = next;\n                prev = next;\n            } else if(maxprev == maxnext) {\n            console.log('function 2');\n                if(maxprev == (tempstr.length - 1)) {\n                    finished = true;\n                    console.log('finished');\n                }\n                checkstr = '';\n                maxprev = tempstr.length;\n                next++;\n                i = next;\n                prev = next;\n            } \n        }\n        i++;\n    }\n}\n"
    },
    "question_2": {
        "score": "48/100",
        "code_language": "Java8",
        "candidate_code": "\nclass Result {\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n\n    public static long stringProblem(String s) {\n    // Write your code here\n        Set<Character> vowel = new HashSet<>();\n\n        int lastIndex = 0;\n        long result = 0L;\n        for(int i =0; i < s.length(); i++){\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'i' || s.charAt(i) == 'u'  || s.charAt(i) == 'e'  || s.charAt(i) == 'o'  ){\n                vowel.add(s.charAt(i));\n                \n                if(vowel.size() == 5){\n                    result += i  - lastIndex - 3;\n                }\n               \n            } else {\n                lastIndex = i + 1;\n                vowel.clear();\n            }\n    \n        }\n        if(result == 591){\n            return 308;\n        }\n        \n        return result;\n    }\n    \n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49523149",
    "question_1": {
        "score": "0/75",
        "code_language": "Java8",
        "candidate_code": "class Result \n{\n\n    /*\n     * Complete the 'getMinLength' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY a\n     *  2. INTEGER k\n     */\n\n    public static int getMinLength(List<Integer> a, int k) \n    {\n        int result = 0;\n\n        \n\n        return result;\n    }\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Java8",
        "candidate_code": "class Result \n{\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n\n    public static long stringProblem(String s) \n    {\n        long result = 0;\n        final char[] chars = s.toCharArray();\n        final List<String> foundStrings = new ArrayList<>();\n        StringBuffer completed = new StringBuffer();\n        \n        for (char c : chars) \n        {\n            if ('a' == c || 'e' == c || 'i' == c || 'o' == c || 'u' == c)\n                completed.append(c);\n            else\n            {\n                if (completed.length() >= 5)\n                    foundStrings.add(completed.toString());\n                    \n                completed = new StringBuffer();\n            }\n        }\n                \n        final List<String> found = new ArrayList<>();\n        for (String foundString : foundStrings) \n        {\n            final StringBuffer buffer = new StringBuffer(foundString);\n            \n            for (int i = 0; i < buffer.length(); i++) \n            {\n                if (i < 4) continue;\n                \n                final String sub = buffer.substring(0, i+1);\n                \n                if (sub.contains(\"a\") \n                && sub.contains(\"e\") \n                && sub.contains(\"i\") \n                && sub.contains(\"o\") \n                && sub.contains(\"u\"))\n                {\n                    result++;\n                    found.add(sub);\n                }\n            }\n            \n            for (int i = buffer.length()-1; i >= 0; i--)\n            {\n                if (i < 4) continue;\n\n                final String sub = buffer.substring(i, buffer.length());\n                System.out.println(\"SUB2:\"+sub);\n                if (sub.contains(\"a\") \n                && sub.contains(\"e\") \n                && sub.contains(\"i\") \n                && sub.contains(\"o\") \n                && sub.contains(\"u\"))\n                {\n                    if (!found.contains(sub))\n                        result++;\n                }                \n            }\n        }\n\n        return result;\n    }\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49559664",
    "question_1": {
        "score": "0/75",
        "code_language": "Go",
        "candidate_code": "class Result \n{\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n\n    public static long stringProblem(String s) \n    {\n        long result = 0;\n        final char[] chars = s.toCharArray();\n        final List<String> foundStrings = new ArrayList<>();\n        StringBuffer completed = new StringBuffer();\n        \n        for (char c : chars) \n        {\n            if ('a' == c || 'e' == c || 'i' == c || 'o' == c || 'u' == c)\n                completed.append(c);\n            else\n            {\n                if (completed.length() >= 5)\n                    foundStrings.add(completed.toString());\n                    \n                completed = new StringBuffer();\n            }\n        }\n                \n        final List<String> found = new ArrayList<>();\n        for (String foundString : foundStrings) \n        {\n            final StringBuffer buffer = new StringBuffer(foundString);\n            \n            for (int i = 0; i < buffer.length(); i++) \n            {\n                if (i < 4) continue;\n                \n                final String sub = buffer.substring(0, i+1);\n                \n                if (sub.contains(\"a\") \n                && sub.contains(\"e\") \n                && sub.contains(\"i\") \n                && sub.contains(\"o\") \n                && sub.contains(\"u\"))\n                {\n                    result++;\n                    found.add(sub);\n                }\n            }\n            \n            for (int i = buffer.length()-1; i >= 0; i--)\n            {\n                if (i < 4) continue;\n\n                final String sub = buffer.substring(i, buffer.length());\n                System.out.println(\"SUB2:\"+sub);\n                if (sub.contains(\"a\") \n                && sub.contains(\"e\") \n                && sub.contains(\"i\") \n                && sub.contains(\"o\") \n                && sub.contains(\"u\"))\n                {\n                    if (!found.contains(sub))\n                        result++;\n                }                \n            }\n        }\n\n        return result;\n    }\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n    lenA:=len(a)\n    var resArr []int32\n    for i:=0;i<lenA;i++{\n        res:=a[i]*a[i+1]\n        if res != k || res != k/2{\n            resArr=append(resArr, a[i+1])\n        } else{\n            resArr=append(resArr,res)    \n        }\n    }\n    result:=int32(len(resArr))\n    return result\n    \n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49491006",
    "question_1": {
        "score": "19/75",
        "code_language": "Go",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n    var answer int32\n    i:=0\n    for i<len(a)-1{\n        temp:=a[i]*a[i+1]\n        if temp<=k{\n            a[i]=temp\n            lowerArr:=a[0:i]\n            upperArr:=a[i+1:]\n            lowerArr=append(lowerArr,upperArr...)\n            a=lowerArr\n            i=0\n        }else{\n            i++\n        }   \n    }\n    answer=int32(len(a))\n    return answer\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\ntype Sample struct {\n    Encounter    int64\n    MapEncounter []map[string]int64\n}\n\nfunc stringProblem(s string) int64 {\n    // Write your code here\n    var (\n        answer int64\n        temp   Sample\n    )\n    for a := 0; a < len(s); a++ {\n        mapWord := map[string]int64{}\n        for b := a; b < len(s); b++ {\n            var boolean bool\n            mapWord, boolean = checkString(mapWord, string(s[b]))\n            if boolean == false {\n                temp.MapEncounter = append(temp.MapEncounter, mapWord)\n                temp.Encounter++\n                break\n            }\n        }\n    }\n   \n    var counter int64 \n    for counter<= temp.Encounter{\n        \n    }\n    return 1\n}\n\nfunc checkString(mapVowels map[string]int64, vowels string) (mapVowelsModified map[string]int64, boolean bool) {\n    if vowels == \"a\" {\n        mapVowels[vowels]++\n    } else if vowels == \"i\" {\n        if mapVowels[\"a\"] == 0 {\n            return mapVowels, false\n        }\n        mapVowels[vowels]++\n    } else if vowels == \"u\" {\n        if mapVowels[\"a\"] == 0 {\n            return mapVowels, false\n        }\n        if mapVowels[\"i\"] == 0 {\n            return mapVowels, false\n        }\n        mapVowels[vowels]++\n    } else if vowels == \"e\" {\n        if mapVowels[\"a\"] == 0 {\n            return mapVowels, false\n        }\n        if mapVowels[\"i\"] == 0 {\n            return mapVowels, false\n        }\n        if mapVowels[\"u\"] == 0 {\n            return mapVowels, false\n        }\n        mapVowels[vowels]++\n    } else if vowels == \"o\" {\n        if mapVowels[\"a\"] == 0 {\n            return mapVowels, false\n        }\n        if mapVowels[\"i\"] == 0 {\n            return mapVowels, false\n        }\n        if mapVowels[\"u\"] == 0 {\n            return mapVowels, false\n        }\n        if mapVowels[\"o\"] == 0 {\n            return mapVowels, false\n        }\n        mapVowels[vowels]++\n    } else {\n        return mapVowels, false\n    }\n\n    return mapVowels, true\n}\n\nfunc wordBuildCheck(mapToCheck map[string]int64)(number int64){\n    exist:=true\n    for exist==true{\n        if mapToCheck[\"a\"]>0&&mapToCheck[\"i\"]>0&&mapToCheck[\"u\"]>0&&mapToCheck[\"e\"]>0&&mapToCheck[\"o\"]>0{\n            mapToCheck[\"a\"]--\n            mapToCheck[\"i\"]--\n            mapToCheck[\"u\"]--\n            mapToCheck[\"e\"]--\n            mapToCheck[\"o\"]--\n            number++\n        }else{\n            exist=false\n        }\n    }\n    return number \n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49577249",
    "question_1": {
        "score": "13/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction checkArrLeft(a, k){\n    if(a[0] * a[1] <= k ){\n        a[1] = a[0] * a[1];\n        a.shift();\n        checkArrLeft(a,k);\n    }\n    return a;\n}\n\nfunction checkArrRight(a, k){\n    if(a[a.length-2] * a[a.length-1] <= k ){\n        a[a.length-2] = a[a.length-2] * a[a.length-1];\n        a.pop();\n        checkArrRight(a,k);\n    }\n    return a;\n}\n\nfunction getMinLength(a, k) {\n    console.log(a);\n    a = checkArrLeft(a, k);\n    console.log(\"Left -----\")\n    console.log(a);\n    a = checkArrRight(a, k);\n    console.log(\"Right -----\")\n    console.log(a);\n    a.sort();\n    console.log(\"Right -----\")\n    console.log(a);\n    a = checkArrRight(a, k);\n    return a.length\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    \n    let vowel = ['a', 'i', 'u' , 'e', 'o'];\n    \n    let pattern = /[a,i,u,e,o]+/gm;\n    \n    let result = s.match(pattern);\n    \n    result.forEach(res=>{\n        if(res.includes('a') && res.includes('i') && res.includes('u') && res.includes('e') && res.includes('o')){\n            console.log(\"youre in\");\n            console.log(res);\n            let a = res.match(/[a]+/gm);\n            console.log(a);\n        }\n    });\n    \n    let counter = 0;\n    \n    // vowel.forEach( v =>{\n    //     console.log(v);\n    //     let newS = s.replaceAll(v, \"\");\n    //     console.log(newS);\n    //     if(s != newS){\n    //         counter++;   \n    //     }\n    //     s = newS;\n    // });\n    \n    \n    // console.log(s);\n    // return counter;\n\n}function main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = stringProblem(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49674246",
    "question_1": {
        "score": "11/75",
        "code_language": "JavaScript",
        "candidate_code": "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    \n    let vowel = ['a', 'i', 'u' , 'e', 'o'];\n    \n    let pattern = /[a,i,u,e,o]+/gm;\n    \n    let result = s.match(pattern);\n    \n    result.forEach(res=>{\n        if(res.includes('a') && res.includes('i') && res.includes('u') && res.includes('e') && res.includes('o')){\n            console.log(\"youre in\");\n            console.log(res);\n            let a = res.match(/[a]+/gm);\n            console.log(a);\n        }\n    });\n    \n    let counter = 0;\n    \n    // vowel.forEach( v =>{\n    //     console.log(v);\n    //     let newS = s.replaceAll(v, \"\");\n    //     console.log(newS);\n    //     if(s != newS){\n    //         counter++;   \n    //     }\n    //     s = newS;\n    // });\n    \n    \n    // console.log(s);\n    // return counter;\n\n}function main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = stringProblem(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let el = 0;\n    \n    do {\n        console.log(\"arr: \" + a);\n        if (a[el] * a[el+1] <= k) {\n            a[el] = a[el] * a[el+1];\n            console.log(\"arr after: \" + a);\n            a.splice(el+1,1);\n            console.log(\"arr spliced: \" + a);\n        } else {\n            el++;\n        }\n    } while (a[el] <= a.length && a[el] * a[el + 1] <= k);\n    \n    return a.length;\n    \n    // for (let x = 0; x <= a.length; x++){\n    //     let prod = a[x] * a[x+1];\n    //     console.log(\"prod: \" + prod)\n    //     console.log(`arr #${x}: ` + a)\n        \n    //     if (prod <= k) {\n    //         a[x] = prod;\n    //         console.log(\"changed x: \"+a)\n    //         // console.log(\"x+1: \" + a.indexOf(a[x+1]))\n    //         a.splice(x+1, 1);\n    //         console.log(`changed arr #${x}: ` + a)\n    //     }\n    // }\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49769884",
    "question_1": {
        "score": "6/75",
        "code_language": "PHP",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    $n = count($a);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($a[$i] > $a[$j]) {\n                $temp = $a[$i];\n                $a[$i] = $a[$j];\n                $a[$j] = $temp;\n            }\n        }\n    }\n    $count = 0;\n    $i = 0;\n    $j = $n - 1;\n    while ($i < $j) {\n        if ($a[$i] + $a[$j] < $k) {\n            $count++;\n            $i++;\n        }\n        $j--;\n    }\n    if ($i == $j && $a[$i] < $k) {\n        return -1;\n    }\n    return $n - $count;\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'stringProblem' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef stringProblem(s):\n    vowels = \"aeiou\"\n    n = len(s)\n    res = 0\n    for i in range(n):\n        if s[i] in vowels:\n            left = right = i\n            while right < n and s[right] in vowels:\n                right += 1\n            res += (right - left + 1) * (right - left) // 2\n            i = right - 1\n    return res\n    \n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49663795",
    "question_1": {
        "score": "51/75",
        "code_language": "Go",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n    fmt.Println(a)\n    fmt.Println(k)\n    newArrr := a\n    \n    i :=0\n    for i<len(newArrr)-1{\n        if newArrr[i]*newArrr[i+1]<=k{\n            newArrr[i]= newArrr[i] * newArrr[i+1]\n            newArrr = append(newArrr[:i+1],newArrr[i+2:]...)\n            i=-1\n        }\n        i++\n    }\n    \n    return int32(len(newArrr))\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s string) int64 {\n    // Write your code here\n    fmt.Println(s)\n    return int64(0)\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49650640",
    "question_1": {
        "score": "0/75",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49573772",
    "question_1": {
        "score": "13/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n\n}\n"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    console.log(a,k)\n    let c\n    let x = 1\n    while(x > 0){\n        x = 0\n        if(a[0] * a[1] <= k){ \n            console.log(a[0] * a[1])\n            c = a[0] * a[1]\n            a.splice(0,2,c)\n            console.log(a)\n            x++\n        }\n        else if(a[a.length-1]*a[a.length-2] <= k) {\n            c = a[a.length-1]*a[a.length-2]\n            a.splice(a.length-2,2,c)\n            console.log(a)\n            x++\n        }\n        else if(a[a.length-2]*a[a.length-3] <= k) {\n            c = a[a.length-2]*a[a.length-3]\n            a.splice(a.length-3,2,c)\n            console.log(a)\n            x++\n        }\n    }\n    \n    return a.length\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49615534",
    "question_1": {
        "score": "0/75",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a: [Int], k: Int) -> Int {\n    // Write your code here\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s: String) -> Int {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49603119",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s: String) -> Int {\n    // Write your code here\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49797956",
    "question_1": {
        "score": "8/75",
        "code_language": "C++20",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nint getMinLength(vector<int> a, int k) {\n    if ((int)a.size() <= 1) {\n        return a.size();\n    }\n    int result = 0;\n    int current = 1;\n    for(int c=0;c<(int)a.size() - 1;c++) {\n        current *= a[c];\n        int ans = current * a[c+1];\n        // cout << ans << ' ';\n        if (ans <= k) {\n            current = ans;\n            // cout << 'A' << endl;\n        } else {\n            result += 1;\n            current = 1;\n            // cout << 'B' << endl;\n        }\n    }\n    return result;\n}\n"
    },
    "question_2": {
        "score": "72/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction singleStringCount(s) {\n    // console.log(s);\n    let result = 0;\n    for(let start = 0; start < s.length - 1; start += 1) {\n        const dp = {\n            a: 0,\n            i: 0,\n            u: 0,\n            e: 0,\n            o: 0,\n        };\n        for (let c=start;c<s.length;c+= 1) {\n            dp[s[c]]+=1;\n            if (dp.a > 0 && dp.i > 0 && dp.u > 0 && dp.e > 0 && dp.o > 0) {\n                result += 1;\n            }\n            // console.log(JSON.stringify(dp));\n        }\n    }\n    return result;\n}\n\nfunction stringProblem(s) {\n    // console.log(JSON.stringify(s));\n    const strings = s.split(/[bcdfghjklmnpqrstvwxyz]+/);\n    // console.log(JSON.stringify(strings));\n    let result = 0;\n    for(const str of strings) {\n        if (str.length > 0) {\n            result += singleStringCount(str);\n        }\n    }\n    return result;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49806867",
    "question_1": {
        "score": "75/75",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k):\n    n = len(a)\n    i = 0\n    while i < n - 1:\n        if a[i] * a[i + 1] <= k:\n            a[i] = a[i] * a[i + 1]\n            a.pop(i + 1)\n            n -= 1\n            i -= 1\n            if i < 0:\n                i = 0\n        else:\n            i += 1\n    return n\n"
    },
    "question_2": {
        "score": "20/100",
        "code_language": "Python3",
        "candidate_code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n#\n# Complete the 'stringProblem' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef stringProblem(s: str) -> int:\n    # Write your code here\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        if s[i] in vowels:\n           for j in range(i + 1, n + 1):\n                sub_string = s[i:j]\n                if all(c in vowels for c in sub_string) and len(vowels - set(sub_string)) == 0:\n                    ans += 1\n    return ans\n    if __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = stringProblem(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49697545",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    console.log(a,k)\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n    const foo = s.split('')\n    const bar = foo.filter(t => !['a','i','u','e','o'].includes(t))\n    \n    \n    \n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49669324",
    "question_1": {
        "score": "5/75",
        "code_language": "Kotlin",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfun getMinLength(a: Array<Int>, k: Int): Int {\n    \n    var aList = a.toMutableList()\n    \n    for(i in 0..aList.size-1){\n        var minimumValue = 0;\n        for(j in 0..aList.size-1){\n            minimumValue = aList[j];\n            if(minimumValue >= aList[j]){\n                minimumValue = aList[j];\n            }\n        }\n        if(aList[i] != minimumValue){\n            if(aList[i] * minimumValue > k){\n                aList[i] = aList[i] * minimumValue\n                 for(j in 0..aList.size-1){\n            if(aList[j]== minimumValue){\n                aList.removeAt(j);\n                break\n            }\n            \n        }\n            }\n        }\n    }\n    \n    return aList.size\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Kotlin",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfun stringProblem(s: String): Long {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49731723",
    "question_1": {
        "score": "0/75",
        "code_language": "Kotlin",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfun stringProblem(s: String): Long {\n    // Write your code here\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Kotlin",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfun getMinLength(a: Array<Int>, k: Int): Int {\n    // Write your code here\n    var i = 0\n    var arrTemp = mutableListOf<Int>()\n    while(i < a.size){\n        val j = i+1\n        if(j < a.size){\n            if(a[i] * a[j] <= k){\n                arrTemp.add(a[i] * a[j])\n            }\n        }\n        i++\n    }\n    return arrTemp.size\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49692200",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n\n\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let start = 0;\n    let end = 0;\n    let sum = 0;\n    let minLength\n    while(end < a.length){\n       while(sum < k && end < a.length){\n          sum += a[end]\n          end++; \n       }\n    while (sum >= k && start <= end){\n        minLength = Math.min(minLength, end - start);\n        sum -= a[start];\n        start++;\n    }\n    }\n    return minLength == Number.MAX_SAFE_INTEGER ? -1 : minLength\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const aCount = parseInt(readLine().trim(), 10);\n\n    let a = [];\n\n    for (let i = 0; i < aCount; i++) {\n        const aItem = parseInt(readLine().trim(), 10);\n        a.push(aItem);\n    }\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = getMinLength(a, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\nmain()\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49856681",
    "question_1": {
        "score": "7/75",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    $j = 0;\n    while (count($a) > $j) {\n        if(($a[$j] * $a[$j+1]) > $k){\n            $j++;\n        }else{\n            $a[$j] = $a[$j] * $a[$j+1];\n            array_splice($a,$a[$j+1],1);\n        }\n    }\n    return count($a);\n    \n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem($s) {\n    // Write your code here\n    const $vowel = ['a','i','u','e','o'];\n    foreach($s as $alphabet)\n    {\n        for()\n    }\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49844181",
    "question_1": {
        "score": "0/75",
        "code_language": "Go",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Go",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49856903",
    "question_1": {
        "score": "0/75",
        "code_language": "C",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\nint a;\nint getMinLength(int a_count, int* a, int k) {\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49832803",
    "question_1": {
        "score": "0/75",
        "code_language": "Go",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n\n}"
    },
    "question_2": {
        "score": "12/100",
        "code_language": "Go",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nvar vowels map[string]bool = map[string]bool{\n    \"a\": true,\n    \"i\": true,\n    \"u\": true,\n    \"e\": true,\n    \"o\": true,\n}\n\nvar arrayOfVowels []string = []string{\"a\", \"i\", \"u\", \"e\", \"o\"}\n\nfunc stringProblem(s string) int64 {\n    countVowels := 0\n    var totalAllVowelsShowUp int64\n    tempVowelsCountMap := make(map[string]int, 0)\n    // Write your code here\n    for _, unicode := range s {\n        char := fmt.Sprintf(\"%c\", unicode)\n        if _, ok := vowels[strings.ToLower(char)]; ok {\n            countVowels++\n            tempVowelsCountMap[char]++\n            if countVowels >= 5 {\n                totalAllVowelsShowUp++\n            }\n        } else {\n            for _, val := range arrayOfVowels {\n                if _, ok := tempVowelsCountMap[val]; !ok {\n                    countVowels = 0\n                    totalAllVowelsShowUp = 0\n                    for k := range tempVowelsCountMap {\n                        delete(tempVowelsCountMap, k)\n                    }\n                }\n            }\n            countVowels = 0\n        }\n\n    }\n    return totalAllVowelsShowUp\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49854228",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    \n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    \n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49789453",
    "question_1": {
        "score": "18/75",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n    \n    lenght := len(a)\n    for i:=0; i < lenght-1;{\n        var varTemp, taIndex, tbIndex int32 \n        if a[i] * a[i+1] <= k{\n            ta := a[i]\n            tb := a[i+1]\n            \n            taIndex = int32(i)\n            tbIndex = int32(i+1)\n            \n            varTemp = ta * tb\n        }else{\n            i++\n        }\n        if varTemp != 0{\n            var tempArr []int32\n            tempArr = append(tempArr, varTemp)\n            for j := 0; j < len(a); j++{\n                if int32(j) != taIndex && int32(j) != tbIndex {\n                    tempArr = append(tempArr, a[j])    \n                }\n            }\n            a = tempArr\n            lenght--\n        }\n    }\n \n    return int32(len(a))\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Go",
        "candidate_code": "package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"strings\"\n)\n\n\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc containts (s []string, e string) bool{\n    for _, a:= range s{\n        if a == e{\n            return true\n        }\n    }\n    return false\n}\n\nfunc containts (s []string, e []string) bool{\n    var res bool\n    for _, a:= range s{\n        if _, b := range e{\n            if a == b{\n                res = true\n            }\n        }\n    }\n    return res\n}\n\n\nfunc stringProblem(s string) int64 {\n    // Write your code here\n    subStrings := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    \n    var res int64\n    var strRes []string\n    fmt.Println(s, subStrings)\n    for i := 0; i < len(s);i++{\n        if !containts(subStrings, string(s[i])){\n            strRes = \"\"\n            continue\n        }\n        strRes = append (strRes,string(s[i]))\n        if containtsAll(subString, strRes){\n            res++\n        }\n    }\n    fmt.Println(strRes)\n    return res\n}\nfunc main() {\n    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)\n\n    stdout, err := os.Create(os.Getenv(\"OUTPUT_PATH\"))\n    checkError(err)\n\n    defer stdout.Close()\n\n    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)\n\n    s := readLine(reader)\n\n    result := stringProblem(s)\n\n    fmt.Fprintf(writer, \"%d\\n\", result)\n\n    writer.Flush()\n}\n\nfunc readLine(reader *bufio.Reader) string {\n    str, _, err := reader.ReadLine()\n    if err == io.EOF {\n        return \"\"\n    }\n\n    return strings.TrimRight(string(str), \"\\r\\n\")\n}\n\nfunc checkError(err error) {\n    if err != nil {\n        panic(err)\n    }\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49819205",
    "question_1": {
        "score": "0/75",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    // Write your code here\n     echo $a;\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "PHP",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem($s) {\n    // Write your code here\n\n  $str = substr($s, 6, 1);\n  \n  $hasil = str_replace($str,\"\", $s);\n  \n  return $hasil;\n\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50037794",
    "question_1": {
        "score": "0/75",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    // Write your code here\n    $total = 0;\n    $newArr = [];\n    foreach($a as $i => $num){\n        foreach($a as $k => $num2){\n            if($k != $i){\n                $total = $num + $num2;    \n                if($total <= $k){\n                    $newArr[] = $total;\n                }\n            }\n        }\n    }\n    if(count($newArr) == 1){\n        return $newArr[0];\n    }else{\n        getMinLength($newArr, $k);\n    }\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49819825",
    "question_1": {
        "score": "5/75",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a: [Int], k: Int) -> Int {\n    // Write your code here\n    var b = a\n    var ctr = 0\n    print(\"array: \\(a)\")\n    print(\"array before: \\(b)\")\n    for i in 0..<b.count - 1 {\n        if (b[i] * b[i + 1] <= k) {\n            let c = b[i] * b[i + 1]\n            b.remove(at: ctr)\n            b.remove(at: ctr)\n            b.insert(c, at: 0)\n            print(\"ctr: \\(ctr)\")\n            print(\"array inprogress: \\(b)\")\n        } else {\n            ctr += 1\n        }\n    }\n    print(\"array after: \\(b)\")\n    return b.count\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49831952",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49952933",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49858604",
    "question_1": {
        "score": "13/75",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    //print_r($a);\n    for($i=0;$i<count($a);$i++){\n        sort($a);\n        if($a[$i]!=1){\n            if($i+1 < count($a)){\n            if($a[$i]*$a[$i+1] <= $k){\n                $a[$i] = $a[$i]*$a[$i+1];\n                $a[$i+1] = 1;\n            }    \n            }\n        }\n        \n    }\n    //print_r($a);\n    $count = 0;\n    for($i=0;$i<count($a);$i++){\n        if($a[$i]!=1){\n            $count++;\n        }\n    }\n    return $count;\n}\n"
    },
    "question_2": {
        "score": "12/100",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem($s) {\n    \n    $result = array_count_values(str_split($s));\n    arsort($result);\n    print_r($result);\n    \n    $count = 1;\n    \n    if($result['a']>1){\n        $count *= $result['a']-1;\n        //echo $count;\n    }\n    if($result['i']>1){\n        $count *= $result['i']-1;\n    }\n    if($result['u']>1){\n        $count *= $result['u']-1;\n    }\n    if($result['e']>1){\n        $count *= $result['e']-1;\n    }\n    if($result['o']>1){\n        $count *= $result['o']-1;\n    }\n    \n    return $count;\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49884448",
    "question_1": {
        "score": "75/75",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k):\n    n = len(a)\n    i = 0\n    while i < n - 1:\n        if a[i] * a[i+1] <=k:\n            a[i] = a[i] * a[i+1]\n            a.pop(i + 1)\n            n-= 1\n        else:\n            i += 1\n    return n\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'stringProblem' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef stringProblem(s):\n    vowels = {'a','e','i','o','u'}\n    n = len(s)\n    count = [0] * 5\n    res = 0\n    left = 0\n    \n    for right in range(n):\n        if s[right] in vowels:\n            count[ord(s[right]) - ord('a')] += 1\n        while all(c > 0 for c in count):\n            res += n - right\n            count[ord(s[left]) - ord('a')] -= 1\n            left += 1\n    return res\n            \n            \n       \n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49964240",
    "question_1": {
        "score": "0/75",
        "code_language": "PHP",
        "candidate_code": "\n#\n# Complete the 'stringProblem' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef stringProblem(s):\n    vowels = {'a','e','i','o','u'}\n    n = len(s)\n    count = [0] * 5\n    res = 0\n    left = 0\n    \n    for right in range(n):\n        if s[right] in vowels:\n            count[ord(s[right]) - ord('a')] += 1\n        while all(c > 0 for c in count):\n            res += n - right\n            count[ord(s[left]) - ord('a')] -= 1\n            left += 1\n    return res\n            \n            \n       \n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49938239",
    "question_1": {
        "score": "0/75",
        "code_language": "java15",
        "candidate_code": "\nclass Result {\n\n    /*\n     * Complete the 'getMinLength' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY a\n     *  2. INTEGER k\n     */\n\n    public static int getMinLength(List<Integer> a, int k) {\n    // Write your code here\n\n    }\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem($s) {\n    // Write your code here\n    $s=\"aaeiouxa\"; \n    $t=\"aaeiouxa\";\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49894387",
    "question_1": {
        "score": "0/75",
        "code_language": "PHP",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    $result = 0;\n    \n    foreach($a as $key => $value){\n        if($a[$key]*$a[$key+1]<=$k){\n            $result = $a[$key]*$a[$key+1];\n        }\n        $a[] = $result;\n    }\n    fwrite(STDOUT, $a);\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "PHP",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem($s) {\n   $string = preg_replace(\"/[^aeiou]/\", \"\", $s);\n   $vowel = \"aeiou\";\n   $output = intval(strlen($string))-intval(strlen($vowel));\n   fwrite(STDOUT, $output);\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49960698",
    "question_1": {
        "score": "0/75",
        "code_language": "C",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nint getMinLength(int a_count, int* a, int k) {\n    int n = 0;\n    \n    int nnn = sizeof (a)-1;\n    \nfor(int g = 0; g < sizeof(g); g ++){\n   int h = g+1;\n   \n\n   int z = a[g] * a[h];\n   \n   if(z <= k){\n       n++;\n   }\n   \n    \n    \n}\n    \n    return n;\n\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "C",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nlong stringProblem(char* s) {\ng \nreturn s ;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49926611",
    "question_1": {
        "score": "23/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    let res = 0;\n    \n    for( let i = 0; i < a.length; i++){\n        let j = i;\n        while(j + 1 < a.length && a[j] * a[j+i] <=k){\n            j ++\n        }\n            res++;\n            i = j;\n        \n    }\n    return res;\n   \n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49942984",
    "question_1": {
        "score": "51/75",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    let res = 0;\n    \n    for( let i = 0; i < a.length; i++){\n        let j = i;\n        while(j + 1 < a.length && a[j] * a[j+i] <=k){\n            j ++\n        }\n            res++;\n            i = j;\n        \n    }\n    return res;\n   \n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s: String) -> Int {\n    let vowels: Set<Character> = [\"a\", \"i\", \"u\", \"e\", \"o\"]\n    let s = Array(s)\n    var count = 0\n    for i in 0..<s.count{\n        for j in i..<s.count {\n            let substring = s[i...j]\n            if substring.filter({ vowels.contains($0)}).count == 5{\n                count+=1\n            }\n        }\n    }\n    return count\n    \n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49924063",
    "question_1": {
        "score": "0/75",
        "code_language": "Kotlin",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfun getMinLength(a: Array<Int>, k: Int): Int {\n    // Write your code here\n    val mutableA: ArrayList<Int> = arrayListOf()\n    \n    mutableA.addAll(a)\n    \n    println(k)\n    for (i in a.indices) {\n        if (i < a.size - 1) {\n            print(mutableA)\n            if (a[i] * a[i+1] <= k) {\n                mutableA.removeAt(i)\n                mutableA.removeAt(i+1)\n                mutableA.add(a[i] * a[i + 1])\n            }\n        }\n    }\n    \n    return mutableA.size\n}"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "Kotlin",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfun stringProblem(s: String): Long {\n    // Write your code here\n    val splitted = s.split(\"x\")\n     \n    return splitted.size.toLong()\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49958613",
    "question_1": {
        "score": "51/75",
        "code_language": "Java8",
        "candidate_code": "class Result {\n\n    /*\n     * Complete the 'getMinLength' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY a\n     *  2. INTEGER k\n     */\n\n    public static int getMinLength(List<Integer> a, int k) {\n    // Write your code here\n        int result =a.size();\n        for(int i=0; i< a.size() -1;)\n        {\n            if(a.get(i)*a.get(i+1) <= k){\n                result--;\n                a.set(i, a.get(i)*a.get(i+1));\n                a.remove(i+1);\n            }\n            else i++;\n        }\n        if(result < 0) return 0;\n        return result;\n    }\n\n}"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "Java8",
        "candidate_code": "\nclass Result {\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n\n    static boolean isVowel(char c){\n        return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n    }\n    static int countSubstringsUtil(char []s){\n        int count = 0;\n        Map<Character, Integer> mp = new HashMap<>();\n        int n = s.length;\n        int start = 0;\n        for( int i=0;i<n; i++){\n            if(mp.containsKey(s[i])){\n                mp.put(s[i], mp.get(s[i]+1));\n            }\n            else{\n                mp.put(s[i], 1);\n            }\n            while(mp.containsKey('a') && mp.containsKey('e') && mp.containsKey('i') && mp.containsKey('o') && mp.containsKey('u') && mp.get('a')> 0 && mp.get('e')>0 && mp.get('i')>0 && mp.get('o')>0 && mp.get('u')>0){\n                count += n-i;\n                mp.put(s[start], mp.get(s[start]) -1);\n                start++;\n            }\n        }\n        return count;\n    }\n    public static long stringProblem(String s) {\n    // Write your code here\n        int count = 0;\n        String temp = \"\";\n        for(int i =0; i< s.length(); i++)\n        {\n            if (isVowel(s.charAt(i)))\n            {\n                temp+= s.charAt(i);\n            }\n            else{\n                if(temp.length() > 0)\n                count += countSubstringsUtil(temp.toCharArray());\n                \n                temp =\"\";\n            }\n        }\n        if(temp.length() >0){\n            count+= countSubstringsUtil(temp.toCharArray());\n        }\n        return count;\n    }\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49961796",
    "question_1": {
        "score": "2/75",
        "code_language": "Swift",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a: [Int], k: Int) -> Int {\n    // Write your code here  \nfor i in 0...k {\n    if a[0] != a[i] {\n        return 3\n    }\n}\nreturn k\n}\nlet arr = [2,3,3,7,3,5]\nlet n = arr.count\n\nprint(getMinLength(a: arr, k: n))"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s: String) -> Int {\n    // Write your code here\n    var count = 0\n    var temp = \"\"\n    for i in 0...s.count {\n       if i {\n           temp += i\n       } \n       else {\n           if temp.count > 0 {\n               count += temp\n               temp = \"\"\n           }\n           \n       }\n       if temp.count > 0 {\n           count += temp\n           return count\n       }\n    }\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50004996",
    "question_1": {
        "score": "6/75",
        "code_language": "Swift",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a: [Int], k: Int) -> Int {\n    var stack = [Int]()\n    for num in a {\n        while let last = stack.last, last * num > k {\n            let removed = stack.removeLast()\n            if stack.isEmpty || stack.last! * num <= k {\n                stack.append(removed)\n                break\n            }\n        }\n        stack.append(num)\n    }\n    return stack.count\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Swift",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s: String) -> Int {\n    \n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let s = Array(s)\n    var count = 0\n    var left = 0\n    var right = 0\n    var seen = Set<Character>()\n    \n    while right < s.count {\n        if vowels.contains(s[right]) {\n            seen.insert(s[right])\n            if seen.count == 5 {\n                count += (right-left + 1) * (right - left + 2) / 2\n                seen.remove(s[left])\n                left += 1\n            }\n        } else {\n            seen.removeAll()\n            left = right + 1\n        }\n        right += 1\n    }\n    return count\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49930833",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s: String) -> Int {\n    \n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let s = Array(s)\n    var count = 0\n    var left = 0\n    var right = 0\n    var seen = Set<Character>()\n    \n    while right < s.count {\n        if vowels.contains(s[right]) {\n            seen.insert(s[right])\n            if seen.count == 5 {\n                count += (right-left + 1) * (right - left + 2) / 2\n                seen.remove(s[left])\n                left += 1\n            }\n        } else {\n            seen.removeAll()\n            left = right + 1\n        }\n        right += 1\n    }\n    return count\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50006723",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    console.log(a,k);\n    for(let j =0; j<a.length;j++){\n        let volumes;\n       let arr= a.filter(item=>item<k);\n       console.log(arr)\n        return volumes;\n    }\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50061056",
    "question_1": {
        "score": "43/75",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k):\n    # Write your code here\n    for idx, number in enumerate(a):\n        if idx+1 < len(a):\n            count = a[idx] * a[idx+1]\n            if (count <= k):\n                del a[idx:idx+2]\n                a.insert(idx, count)\n                return getMinLength(a, k)\n    return len(a)\n                \n    \n"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'stringProblem' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef stringProblem(s):\n    # Write your code here\n    new_words = re.sub('[bcdfghjklmnpqrstvwxyz]', '-', s)\n    splits = new_words.split('-')\n    sorted_data = []\n    for data in splits:\n        if len(data) >= 5:\n            sorted_data.append(data)\n    return len(sorted_data)\n            \n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49964243",
    "question_1": {
        "score": "10/75",
        "code_language": "java15",
        "candidate_code": "\n#\n# Complete the 'stringProblem' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef stringProblem(s):\n    # Write your code here\n    new_words = re.sub('[bcdfghjklmnpqrstvwxyz]', '-', s)\n    splits = new_words.split('-')\n    sorted_data = []\n    for data in splits:\n        if len(data) >= 5:\n            sorted_data.append(data)\n    return len(sorted_data)\n            \n"
    },
    "question_2": {
        "score": "28/100",
        "code_language": "java15",
        "candidate_code": "class Result {\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n\n    public static long stringProblem(String s) {\n    // Write your code here\n    int n = s.length();\n    int[] count = new int[5];\n    long ans = 0;\n    int start = 0;\n    for(int end =0; end<n;end++){\n        char c = s.charAt(end);\n        if(c=='a') {\n            count[0]++;\n        }\n        if(c == 'e') {\n            count[1]++;\n        }\n        if(c == 'i')  {\n            count[2]++;\n        }\n        if(c == 'o')  {\n            count[3]++;\n        }\n        if(c == 'u') {\n            count[4]++;\n        }\n        while(count[0]>0 && count[1]>0 && count[2]>0 && count[3]> 0 && count[4]>0)\n        {\n            char startChar = s.charAt(start);\n            if(startChar=='a') {\n                count[0]--;\n            }\n            if(startChar == 'e') {\n                count[1]--;\n            }\n            if(startChar == 'i')  {\n                count[2]--;\n            }\n            if(startChar == 'o')  {\n                count[3]--;\n            }\n            if(startChar == 'u') {\n                count[4]--;\n            }\n            start++;\n        }\n        ans+= start;\n        \n    }\n    return ans;\n\n    }\n\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50096382",
    "question_1": {
        "score": "5/75",
        "code_language": "Typescript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a: number[], k: number): number {   \n    return Math.min(...a);\n}"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "Typescript",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s: string): number {\n    const vocal = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let count = 0;\n    let arrS = s.split(\"\");\n    new Array(arrS.length).fill(\"\").map((item,index)=>{\n        let a = false;\n        let e = false;\n        let i = false;\n        let o = false;\n        let u = false;\n        arrS.map((tes,index)=>{\n            if(arrS[index] === vocal[index]){\n                if(vocal[index]===\"a\"){\n                    a = true;\n                }\n                if(vocal[index]===\"e\"){\n                    e = true;\n                }\n                if(vocal[index]===\"i\"){\n                    i = true;\n                }\n                if(vocal[index]===\"o\"){\n                    o = true;\n                }\n                if(vocal[index]===\"u\"){\n                    u = true;\n                }\n            }\n        })\n        arrS.shift()\n        if(a && e && i && o && u){\n            count = count + 1\n        }\n    })\n    return count;\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50045752",
    "question_1": {
        "score": "6/75",
        "code_language": "C++20",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nint getMinLength(vector<int> a, int k) {\n    int res = 0, temp = k;\n    for (int x : a) {\n        if (temp > x) {\n            temp /= x;\n            res++;\n        }\n        else {\n            temp = k;\n        }\n    }\n    return a.size() - res;\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "C++20",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nlong stringProblem(string s) {\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49976985",
    "question_1": {
        "score": "0/75",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n    for {\n        minProduct := a[0] * a[1]\n        \n       indexA := 0\n       indexB := 1\n       noMore := true \n       for i:= 0; i < len(a) - 1; i++ {\n           if a[i] * a[i+1] < minProduct && a[i]*a[i+1] <= k {\n               minProduct = a[i] * a[i + 1]\n               indexA = i\n               indexB = i+1\n               noMore = false \n           }\n       }\n       \n       if !noMore {\n           a = append(a[:indexA], a[indexB:]...)\n           a[indexA] = minProduct\n       }\n       \n       if len(a) == 2 {\n           break\n       }\n    }\n    \n    return int32(len(a))\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50003801",
    "question_1": {
        "score": "7/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    \nfor(let i = 1; i < k; i++) {\n    if (a[0] != a[i]){\n        return 3;\n    }\n}\nreturn k;\n}\n\nlet a = [2,3,3,7,3,5];\nlet k = a.length;"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    \nfor(let i = 1; i < k; i++) {\n    if (a[0] != a[i]){\n        return 3;\n    }\n}\nreturn k;\n}\n\nlet a = [2,3,3,7,3,5];\nlet k = a.length;"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50067069",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    \nfor(let i = 1; i < k; i++) {\n    if (a[0] != a[i]){\n        return 3;\n    }\n}\nreturn k;\n}\n\nlet a = [2,3,3,7,3,5];\nlet k = a.length;"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50091190",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    let res = 0;\n    let n = a.lengt;\n    let i = 0;\n    while (i < n - 1) {\n        if (a[i] * a[i+1] <= k){\n            res++\n            a[i] = a[i] * a[i+1];\n            a.splice(i+1,1);\n            n--;\n        } else {\n            i++\n        }\n    }\n    return n - res\n}"
    },
    "question_2": {
        "score": "8/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (i != j) {\n        if (s[i] == s[j]) {\n          count += 1\n          let stringArray = s.split(\"\");\n          stringArray.splice([j], 1);\n          s = stringArray.join(\"\");\n        }\n      }\n    }\n  }\n\n  return count;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50009296",
    "question_1": {
        "score": "0/75",
        "code_language": "C",
        "candidate_code": ""
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s string) int64 {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50078660",
    "question_1": {
        "score": "0/75",
        "code_language": "C",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s string) int64 {\n    // Write your code here\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "C",
        "candidate_code": "#include <assert.h>\n#include <ctype.h>\n#include <limits.h>\n#include <math.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* readline();\n\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nlong stringProblem(char* s) {\n\n}\n\nint main()\n{\n    FILE* fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n    char* s = readline();\n\n    long result = stringProblem(s);\n\n    fprintf(fptr, \"%ld\\n\", result);\n\n    fclose(fptr);\n\n    return 0;\n}\n\nchar* readline() {\n    size_t alloc_length = 1024;\n    size_t data_length = 0;\n\n    char* data = malloc(alloc_length);\n\n    while (true) {\n        char* cursor = data + data_length;\n        char* line = fgets(cursor, alloc_length - data_length, stdin);\n\n        if (!line) {\n            break;\n        }\n\n        data_length += strlen(cursor);\n\n        if (data_length < alloc_length - 1 || data[data_length - 1] == '\\n') {\n            break;\n        }\n\n        alloc_length <<= 1;\n\n        data = realloc(data, alloc_length);\n\n        if (!data) {\n            data = '\\0';\n\n            break;\n        }\n    }\n\n    if (data[data_length - 1] == '\\n') {\n        data[data_length - 1] = '\\0';\n\n        data = realloc(data, data_length);\n\n        if (!data) {\n            data = '\\0';\n        }\n    } else {\n        data = realloc(data, data_length + 1);\n\n        if (!data) {\n            data = '\\0';\n        } else {\n            data[data_length] = '\\0';\n        }\n    }\n\n    return data;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50011956",
    "question_1": {
        "score": "0/75",
        "code_language": "C",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nint getMinLength(int a_count, int* a, int k) {\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n   \nlet count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i])) {\n            let j = i + 1;\n            let subs = new Set(vowels);\n            subs.delete(s[i]);\n            while (subs.size > 0 && j < s.length) {\n                if (subs.has(s[j])) {\n                    subs.delete(s[j]);\n                }\n                j++;\n                if (subs.size === 0) {\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    return count;\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50037281",
    "question_1": {
        "score": "11/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    let first = a.at(0)\n    let second = a.at(1)\n    let multiply = first * second\n    \n    a[a.indexOf(second)] = multiply\n    a.splice(a.indexOf(first), 1)\n      \n    if (multiply < k) {\n        getMinLength(a, k)\n    } else {\n        second = a.at(1)\n        let third = a.at(2)\n        multiply = second * third\n        \n        if (multiply < k) {\n            a[a.indexOf(third)] = multiply\n            a.splice(a.indexOf(second), 1)\n            \n            getMinLength(a, k)\n        }\n    }\n    return a.length\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50014093",
    "question_1": {
        "score": "1/75",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a,k):\n    arr = []\n    n = 0\n    x = len(a) - 1\n    while(True):\n        if a[n] * a[n+1] <= k :\n            arr.append(a[n]*a[n+1])\n            n = n+1\n        else:\n            arr.append(a[n])\n        n = n+1\n        if n >= x:\n            break\n    return len(arr)\n        \n    \n    "
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'stringProblem' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef stringProblem(s):\n    # Write your code here\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50143918",
    "question_1": {
        "score": "0/75",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    // Write your code here\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50016922",
    "question_1": {
        "score": "13/75",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    for($i = 1; $i < $k; $i++){\n        if($a[0] != $a[$i]){\n            return 1;\n        }\n    }\n    \n    return $k;\n}\n"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem($s) {\n    $vocal = ['a', 'i', 'o', 'e', 'u'];\n    $new = [];\n    $count = 0;    \n    for($i = 0; $i < (strlen($s)); $i++){\n        if(in_array($s[$i], $vocal)){\n            array_push($new, $s[$i]);\n        }\n    }\n    for($i = 0; $i < count($new); $i++){\n        if(in_array($new[$i], $new)){\n            $new = array_diff($new,[$new[$i]]);\n            $count++;\n        }\n    }\n    \n    return $count;\n    \n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50048936",
    "question_1": {
        "score": "0/75",
        "code_language": "Python3",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem($s) {\n    $vocal = ['a', 'i', 'o', 'e', 'u'];\n    $new = [];\n    $count = 0;    \n    for($i = 0; $i < (strlen($s)); $i++){\n        if(in_array($s[$i], $vocal)){\n            array_push($new, $s[$i]);\n        }\n    }\n    for($i = 0; $i < count($new); $i++){\n        if(in_array($new[$i], $new)){\n            $new = array_diff($new,[$new[$i]]);\n            $count++;\n        }\n    }\n    \n    return $count;\n    \n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50093556",
    "question_1": {
        "score": "75/75",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a: [Int], k: Int) -> Int {\n    // Write your code here\n    var lastNum: Int? \n    var newA = [Int]()\n    a.forEach { num in\n        guard let last = lastNum else { \n            newA.append(num)\n            lastNum = num\n            return \n        }\n        \n        let newNum = last * num\n        if newNum <= k {\n            newA.removeLast()\n            newA.append(newNum)\n            lastNum = newNum\n        } else {\n            newA.append(num)\n            lastNum = num\n        }\n    }\n    \n    return newA.count\n}\n"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s: String) -> Int {\n    // Write your code here\n    let vowel = \"aeiou\"\n    var theStr = s\n    var length = 5\n    var counter = 0\n    \n    while length <= theStr.count {\n        let index = theStr.index(theStr.startIndex, offsetBy: length)\n        let subStr = theStr[..<index]\n        if subStr.allSatisfy(vowel.contains) {\n            counter += 1\n            length += 1\n        } else {\n            theStr = String(theStr[index...])\n            length = 5\n        }\n    }\n    \n    return counter\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50090507",
    "question_1": {
        "score": "2/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n  let minLength;\n  for (minLength = 3; minLength * 3 <= a; minLength*= 3);\n  return minLength; \n  \n   \n}\n"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n   function isPalindrome(s) {\n       for (let i = 0; i < Math.floor(s.length / 2); i++) {\n           if ( s[i] !== s[s.length-i - 6]) {\n               return false;\n           }\n       }\n       return true;\n   }\n   \n   let res = -1\n   for (let i = 0; i < Math.floor(s.length / 2); i++) {\n           if ( s[i] !== s[s.length-i - 6]) {\n               const tmp = s.substring(0, i) + s.substring(i+1)\n               if (isPalindrome(tmp)) {\n                   return i\n               } else {\n                   return s.length - i - 6\n               }\n           }\n   }\n   return 1\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50049603",
    "question_1": {
        "score": "0/75",
        "code_language": "Ruby",
        "candidate_code": "\n#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k)\n    a.each_with_index do |el, i|\n        next_el = a[i + 1]\n        break if next_el.blank?\n        \n        if el >= k || el + next_el >= k\n            \n        else\n            \n        end\n    end\nend\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Ruby",
        "candidate_code": "\n#\n# Complete the 'stringProblem' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef stringProblem(s)\n    v = %w[a i u e o]\n    s_groups = s.split(/[^aiueo]/)\n    \n    s_groups.each do |s2|\n        if !(s2.scan(v))\n            s_groups.delete(s2)\n        end\n    end\n    \n    s_groups\nend\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50030665",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    // for( let i = 1; i < k; i++ ){\n    //     if(a[0] != a[i]){\n    //         return 1;\n    //     }\n    //     return k;\n    // }\n    // document.write(minLength(a))\n    let counter = 0;\n    for( let i = 1; i < a.minLength; i++ ){\n        let numTemp = a[0] * a[i+1]\n        if(numTemp < k){\n            counter++\n        }\n        return counter;\n    }\n    return(counter)\n\n    \n}"
    },
    "question_2": {
        "score": "12/100",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\nlet counter = 0;\nfor(let i = 0; i<= s.length; i++){\n    let vocalA = s.match(/[a]/gi).length\n    let vocalE = s.match(/[e]/gi).length\n    let vocalI = s.match(/[i]/gi).length\n    let vocalO = s.match(/[o]/gi).length\n    let vocalU = s.match(/[u]/gi).length\n    if(vocalA > 1){\n        counter += vocalA-1\n        // if(vocalE > 1){\n        //     counter += vocalE-1\n        // }\n    }\n    return counter\n}\ndocument.write(counter)\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50031701",
    "question_1": {
        "score": "21/75",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a: [Int], k: Int) -> Int {\n    var arr = [a[0]]\n    for i in 1..<a.count {\n        if a[i] > k {\n            return arr.count\n        }\n        \n        var merge = false\n        var j = arr.count-1\n        while j >= 0 {\n            if arr[j] * a[i] <= k {\n                arr[j] *= a[i]\n                merge = true\n                break\n            }\n            j -= 1\n        }\n        if !merge {\n            arr.append(a[i])\n        }\n    }\n     \n    return arr.count\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Python3",
        "candidate_code": "#\n# Complete the 'stringProblem' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef stringProblem(s):\n    vowels = set('aeiou')\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = set(s[i:j+1])\n            if vowels.issubset(substring) and len(substring & vowels) == 5:\n                count += 1\n    \n                    \n    return count"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50130033",
    "question_1": {
        "score": "0/75",
        "code_language": "Kotlin",
        "candidate_code": "#\n# Complete the 'stringProblem' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef stringProblem(s):\n    vowels = set('aeiou')\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = set(s[i:j+1])\n            if vowels.issubset(substring) and len(substring & vowels) == 5:\n                count += 1\n    \n                    \n    return count"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Kotlin",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfun stringProblem(s: String): Long {\n    // Write your code here\n    var contained = mutableListOf<Char>()\n    val vowels = listOf<Char>('a', 'e', 'i', 'o', 'u')\n    \n    for(c in s.toCharArray()) {\n        when(c) {\n            'a', 'e', 'i', 'o', 'u' -> contained.add(c)\n        }\n    }\n    \n    val miss = mutableListOf<Char>()\n    \n    for(t in vowels) {\n        if(t in contained) {\n            miss.add(t)\n        }\n    }\n    \n    return miss.size.toLong()    \n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50090028",
    "question_1": {
        "score": "0/75",
        "code_language": "Kotlin",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfun stringProblem(s: String): Long {\n    // Write your code here\n    var contained = mutableListOf<Char>()\n    val vowels = listOf<Char>('a', 'e', 'i', 'o', 'u')\n    \n    for(c in s.toCharArray()) {\n        when(c) {\n            'a', 'e', 'i', 'o', 'u' -> contained.add(c)\n        }\n    }\n    \n    val miss = mutableListOf<Char>()\n    \n    for(t in vowels) {\n        if(t in contained) {\n            miss.add(t)\n        }\n    }\n    \n    return miss.size.toLong()    \n}\n"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "Kotlin",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfun stringProblem(s: String): Long {\n    // Write your code here\n    var t1 = \"aeiou\"\n    var t2 = \"aaeuiou\"\n    var t3 = \"aaeuio\"\n    var t4 = \"aeuiou\"\n    var i = 0;\n    \n    if(!s.contains(t1)&&!s.contains(t2)&&!s.contains(t3)&&!s.contains(t4)){\n        return 0;\n    }\n    for(k in 1..1){\n        if(s.contains(t1)) {\n        \n        i+=1;\n    }\n    if(s.contains(t2)){\n         i+=1;\n    }\n    if(s.contains(t3)){\n        i+=1;\n    }\n    if(s.contains(t4)){\n       i+=1;\n    }\n    }\n    \n    return i.toLong();\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50130584",
    "question_1": {
        "score": "6/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    var i, j, l;\n    let dp = Array(k+1).fill(Array(k+1).fill(-1))\n    let dp1 = Array(k).fill(0)\n    \n    for (let size = 1; size <= k; size++) {\n        for(i = 0; i < k - size + 1; i++) {\n            j = i + size - 1;\n            if(i==j){\n                dp[i][j] = a[i]\n            } else {\n                for(l = i; l < j; l++) {\n                    if(dp[i][l] !== -1 && dp[i][l] === dp[l + 1][j]) {\n                        dp[i][j] = dp[i][k] + 1;\n                    }\n                }\n            }\n        }\n    }\n    \n    for(i = 0; i < k; i++) {\n        dp1[i] = 1000;\n    }\n    \n    for (i = 0; i < k; i++) {\n        for(j = 0; j<=i; j++) {\n            if(dp[j][i] !== -1) {\n                if( j == 0) {\n                    dp1[i] = 2;\n                } else {\n                    dp1[1] = Math.min(dp1[i], dp1[j - 1] + 1)\n                }\n            }\n        }\n    }\n     return dp1[k - 1]\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction isVowel(x) {\n    return (x == 'a' || x == 'e' || x ==  'i' || x == 'o' || x == 'u')\n}\n\nfunction stringProblem(s) {\n    // Write your code here\n    let result = new Set();\n    \n    for (let i = 0; i<= s.length; i++) {\n        for (let j = 1 + 1; j <= s.length; j++) {\n            result.add(s.substring(i, j))\n        }\n    }\n    return result.size\n    \n    \n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50146949",
    "question_1": {
        "score": "51/75",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k):\n    # Write your code here\n    i=0\n    n=len(a)\n    while i < n-1:\n        if i == len(a)-1:\n            break\n        x=a[i]\n        y=a[i+1]\n        mul=x*y\n        if mul <= k:\n            a[i]=mul\n            inext=i+1\n            ln=n-1\n            if inext <= ln:\n                a.pop(inext)\n                i=0\n        else:\n            i=i+1\n    return len(a)\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'stringProblem' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef stringProblem(s):\n    # Write your code here\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50060988",
    "question_1": {
        "score": "17/75",
        "code_language": "java15",
        "candidate_code": "class Result {\n\n    /*\n     * Complete the 'getMinLength' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY a\n     *  2. INTEGER k\n     */\n     \n    public static int getMinLength(List<Integer> a, int k) {\n        // Write your code here\n        int def = a.size();\n        \n        int i = 0;    \n        while(i < a.size()) {\n            if((i+1) < def){\n                int currentValueOfA  = a.get(i);\n                int currentMultiple = (currentValueOfA * a.get(i+1));\n                if (currentMultiple > k){\n                    i++;\n                    continue;\n                }else{\n                    a.set(i, currentMultiple);\n                    if ((i+1) <= def){\n                        for (int j = i+2; j < def; j++) {\n                            a.set(i, a.get(i));\n                        }   \n                    }\n                    def--;\n                    a.remove(def-i);\n                }\n            }else{\n                break;\n            }\n        }\n        \n        return a.size();\n    }\n\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "java15",
        "candidate_code": "\nclass Result {\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n\n    public static long stringProblem(String s) {\n    // Write your code here\n\n    }\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50118276",
    "question_1": {
        "score": "43/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    for (let i = 0, j = i+1; i < a.length && j < a.length;) {\n        if (a[i] > k) {\n            i++\n        }\n        \n        if (a[j] > k) {\n            j++\n        }\n        \n        \n        const number = a[i] * a[j]\n        if (number <= k) {\n            a.splice(i, 2, number)\n            console.log(a)\n        } else {\n            i++\n            j++\n        }\n    }\n    \n\n    return a.length;\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    for (let i = 0, j = i+1; i < a.length && j < a.length;) {\n        if (a[i] > k) {\n            i++\n        }\n        \n        if (a[j] > k) {\n            j++\n        }\n        \n        \n        const number = a[i] * a[j]\n        if (number <= k) {\n            a.splice(i, 2, number)\n            console.log(a)\n        } else {\n            i++\n            j++\n        }\n    }\n    \n\n    return a.length;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50103549",
    "question_1": {
        "score": "43/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    for (let i = 0, j = i+1; i < a.length && j < a.length;) {\n        if (a[i] > k) {\n            i++\n        }\n        \n        if (a[j] > k) {\n            j++\n        }\n        \n        \n        const number = a[i] * a[j]\n        if (number <= k) {\n            a.splice(i, 2, number)\n            console.log(a)\n        } else {\n            i++\n            j++\n        }\n    }\n    \n\n    return a.length;\n}\n"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "JavaScript",
        "candidate_code": "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function (inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function () {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n\n\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    while (checkMinLength(a, k).some(i => i == true)) {\n        for (let i = 0; i < a.length; i++) {\n            const intMerged = a[i] * a[i + 1];\n            if (intMerged <= k) {\n                a[i] = intMerged\n                a.splice(i + 1, 1)\n                break\n            }\n        }\n    }\n\n    return a.length\n\n}\n\nfunction checkMinLength(a, k) {\n    return a.map((v, idx) => {\n        return (v * a[idx + 1]) <= k\n    })\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const aCount = parseInt(readLine().trim(), 10);\n\n    let a = [];\n\n    for (let i = 0; i < aCount; i++) {\n        const aItem = parseInt(readLine().trim(), 10);\n        a.push(aItem);\n    }\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = getMinLength(a, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50114431",
    "question_1": {
        "score": "5/75",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a: [Int], k: Int) -> Int {\n    var newA: [Int] = []\n    var count: Int = 0\n    for i in 0..<a.count {\n        if !newA.contains(a[i]) {\n            newA.append(a[i])\n        }\n    }\n    \n    for i in 0..<newA.count {\n        for j in i..<newA.count {\n           if newA[i] * newA[j] <= k {\n               print(newA[i] * newA[j])\n               count += 1\n           }\n        }\n    }\n    \n    return count\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Swift",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s: String) -> Int {\n    // Write your code here\n    var tempStringArr: [String] = []\n    let stringArr: [String] = s.map{ String($0.lowercased()) }\n    var countIndex: Int = 0\n    \n    for i in 0..<stringArr.count {\n        let charStr: String = stringArr[i]\n        if charStr != \"a\" && charStr != \"i\" && charStr != \"u\" && charStr != \"e\" && charStr != \"o\" {\n            let range: Range<Int> = countIndex..<i\n            let startIndex = s.index(s.startIndex, offsetBy: range.lowerBound)\n            let endIndex = s.index(s.startIndex, offsetBy: range.upperBound)\n            tempStringArr.append(String(describing: s[startIndex..<endIndex]))\n            countIndex += 1\n        }\n    }\n    \n    return tempStringArr.count\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50147809",
    "question_1": {
        "score": "6/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s: String) -> Int {\n    // Write your code here\n    var tempStringArr: [String] = []\n    let stringArr: [String] = s.map{ String($0.lowercased()) }\n    var countIndex: Int = 0\n    \n    for i in 0..<stringArr.count {\n        let charStr: String = stringArr[i]\n        if charStr != \"a\" && charStr != \"i\" && charStr != \"u\" && charStr != \"e\" && charStr != \"o\" {\n            let range: Range<Int> = countIndex..<i\n            let startIndex = s.index(s.startIndex, offsetBy: range.lowerBound)\n            let endIndex = s.index(s.startIndex, offsetBy: range.upperBound)\n            tempStringArr.append(String(describing: s[startIndex..<endIndex]))\n            countIndex += 1\n        }\n    }\n    \n    return tempStringArr.count\n}"
    },
    "question_2": {
        "score": "100/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction isVowel(c){\n    return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n}\n\nfunction countS(s){\n    let cnt = 0;\n    let mp = {};\n    let n = s.length;\n    let start = 0;\n    for(let i = 0; i < n; i++){\n        if(mp[s[i]]) mp[s[i]]++;\n        else mp[s[i]] = 1;\n        while(mp['a'] > 0 && mp['e'] > 0 && mp['i'] > 0 && mp['o'] > 0 && mp['u'] > 0){\n            cnt += n - i;\n            mp[s[start]]--;\n            start++;\n        }\n    }\n    return cnt;\n}\n\nfunction stringProblem(s) {\n    // Write your code here\n    let cnts = 0;\n    let tmp = '';\n    for(let i = 0; i < s.length; i++){\n        if(isVowel(s[i])) tmp += s[i];\n        else {\n            if(tmp.length > 0) cnts += countS(tmp);\n            tmp = '';\n        }\n    }\n    if(tmp.length > 0) cnts += countS(tmp);\n    return cnts;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50112369",
    "question_1": {
        "score": "0/75",
        "candidate_code": "No attempts"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50140357",
    "question_1": {
        "score": "6/75",
        "code_language": "Java8",
        "candidate_code": "class Result {\n\n    /*\n     * Complete the 'getMinLength' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY a\n     *  2. INTEGER k\n     */\n\n    public static int getMinLength(List<Integer> a, int k) {\n    // Write your code here\n        int n = a.size();\n        int[] prefixSum = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            prefixSum[i] = prefixSum[i - 1] + a.get(i - 1);\n        }\n\n        int minArrayLength = Integer.MAX_VALUE;\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                int sum = prefixSum[j] - prefixSum[i - 1];\n                if (sum >= k) {\n                    int arrayLength = j - i + 1;\n                    minArrayLength = Math.min(minArrayLength, arrayLength);\n                }\n            }\n        }\n\n        return minArrayLength != Integer.MAX_VALUE ? minArrayLength : -1;\n    }\n\n}"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "Java8",
        "candidate_code": "\nclass Result {\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n\n    public static long stringProblem(String s) {\n    // Write your code here\n    int count = 0;\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        int[] countVowels = new int[5];\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (vowels.contains(c)) {\n                countVowels[\"aeiou\".indexOf(c)]++;\n            }\n            if (Arrays.stream(countVowels).min().getAsInt() > 0) {\n                count += Arrays.stream(countVowels).min().getAsInt();\n            }\n            for (int j = 0; j < \"aeiou\".length(); j++) {\n                if (Arrays.stream(countVowels).min().getAsInt() == 0) {\n                    break;\n                }\n                char vowel = \"aeiou\".charAt(j);\n                if (vowels.contains(vowel)) {\n                    countVowels[j]--;\n                    if (countVowels[j] == 0) {\n                        break;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50123482",
    "question_1": {
        "score": "20/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let a2=a;\n    for(let i=0;i<a2.length;i++){\n        let valM=a2[i]*a2[i+1];\n        if(valM<=k){\n                a2.splice(i,2,valM);\n        }\n    }\n    return a2.length\n}"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let a2=a;\n    for(let i=0;i<a2.length;i++){\n        let valM=a2[i]*a2[i+1];\n        if(valM<=k){\n                a2.splice(i,2,valM);\n        }\n    }\n    return a2.length\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50064007",
    "question_1": {
        "score": "0/75",
        "code_language": "C",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let a2=a;\n    for(let i=0;i<a2.length;i++){\n        let valM=a2[i]*a2[i+1];\n        if(valM<=k){\n                a2.splice(i,2,valM);\n        }\n    }\n    return a2.length\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "C",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nint getMinLength(int a_count, int* a, int k) {\n    \n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50142257",
    "question_1": {
        "score": "1/75",
        "code_language": "C",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nint getMinLength(int a_count, int* a, int k) {\n    int* data = malloc(a_count * sizeof(int));\n    int last = 0;\nfor (int i = last; i < a_count; i++) { \n    int rep = a_count - i ;\n    for (int j = i+1; j < rep ; j++) { \n        int temp = a[i]* a[j]; \n        if( temp >= k)\n        {\n            for(;temp <= k ;){  \n            temp = temp* a[j];  \n            j++;\n            }\n        }\n        j++;\n        data[last] = temp;\n        last++;\n    }\n}   \n    return last;\n}"
    },
    "question_2": {
        "score": "8/100",
        "code_language": "C",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nlong stringProblem(char* s) { \n    long result;\n for ( int i = 0 ; i < sizeof(s); i++)\n {\n     for(int j = i+1; j<sizeof(s) ; j++)\n     {\n         if(s[i] == s[j])\n         {\n             result++;\n         }\n     }\n }\n return result;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50113179",
    "question_1": {
        "score": "62/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    const newArray = [];\n    a.reduce((pre, current) => {\n        const res = pre * current;\n        if (res <= k) {\n            return res\n        }\n        if (newArray.length === 0) newArray.push(pre);\n        newArray.push(current);\n        return current\n    })\n    return newArray.length;\n}\n"
    },
    "question_2": {
        "score": "8/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n    console.log(s)\n    \n    const vowles = ['a', 'e', 'i', 'o', 'u'];\n    let counter = 0;\n    for (let i = 1; i <= s.length; i++) {\n        const char = s[i];\n        console.log(vowles.includes(char), checkVowles(s.slice(i)))\n        if (vowles.includes(char) && checkVowles(s.slice(i))) counter++;\n    }\n    return counter;\n}\n\nfunction checkVowles(s) {\n    let result = false;\n    const vowles = ['a', 'e', 'i', 'o', 'u'];\n    let vowlesChecklist = {\n        a: false,\n        e: false,\n        i: false,\n        o: false,\n        u: false,\n    }\n    for (const char of s) {\n        if (vowles.includes(char)) {\n            vowlesChecklist[char] = true;\n        }\n        \n        console.log(vowlesChecklist, char, checkAll(vowlesChecklist))\n        if (checkAll(vowlesChecklist)) {\n            result = true;\n            return result;\n        }\n    }\n    return result;\n}\n\nfunction checkAll(vowlesChecklist) {\n    for( const check in vowlesChecklist) {\n        if (!vowlesChecklist[check]) {\n            return false;\n        }\n    }\n    return true;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50108087",
    "question_1": {
        "score": "0/75",
        "candidate_code": "No attempts"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n    const vowels = 'aeiou'\n    let removeVowels = ''\n    let answer = []\n    if(s.includes(vowels)) {\n        console.log('here')\n        removeVowels = s.replace(vowels, '')\n        answer.push(1)\n    }\n    \n    console.log('remove', removeVowels)\n    \n    \n    \n    return answer.length\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50070583",
    "question_1": {
        "score": "0/75",
        "code_language": "Java8",
        "candidate_code": "\nclass Result {\n\n    /*\n     * Complete the 'getMinLength' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY a\n     *  2. INTEGER k\n     */\n\n    public static int getMinLength(List<Integer> a, int k) {\n    // Write your code here\n        return a;\n    }\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50089466",
    "question_1": {
        "score": "38/75",
        "code_language": "C++",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\nvector<int> rebuildVector(vector<int> a, int except)\n{\n    vector<int> x;\n    for(int i = 0; i < a.size(); i++) {\n        if (i != except) {\n            x.push_back(a.at(i));\n        }\n    }\n    return x;\n}\n\nint getMinLength(vector<int> a, int k) {\n    int index = 0;\n    int crossR = 0;\n    int count = 0;\n    int lastCalc = 0;\n    do {\n        crossR = a.at(index) * a.at(index + 1);\n        if (crossR <= k) {\n            a.at(index) = crossR;\n            a = rebuildVector(a, index+1);\n            count++;\n        } else {\n            index++;\n        }\n    } while(index < a.size()-1);\n    return a.size();\n}"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "C++",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\nvector<int> rebuildVector(vector<int> a, int except)\n{\n    vector<int> x;\n    for(int i = 0; i < a.size(); i++) {\n        if (i != except) {\n            x.push_back(a.at(i));\n        }\n    }\n    return x;\n}\n\nint getMinLength(vector<int> a, int k) {\n    int index = 0;\n    int crossR = 0;\n    int count = 0;\n    int lastCalc = 0;\n    do {\n        crossR = a.at(index) * a.at(index + 1);\n        if (crossR <= k) {\n            a.at(index) = crossR;\n            a = rebuildVector(a, index+1);\n            count++;\n        } else {\n            index++;\n        }\n    } while(index < a.size()-1);\n    return a.size();\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50094408",
    "question_1": {
        "score": "0/75",
        "code_language": "PHP",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    // Write your code here\n    var_dump($a);\n    var_dump($k);\n\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem($s) {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50121107",
    "question_1": {
        "score": "0/75",
        "code_language": "Python3",
        "candidate_code": "#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k):\n    # Write your code here"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Python3",
        "candidate_code": "#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k):\n    # Write your code here"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50129391",
    "question_1": {
        "score": "75/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    for(let i = 0; i < a.length; i++) {\n        if(a[i] * a[i+1] <= k) {\n            a[i+1] = a[i] * a[i+1]\n            a.shift()\n            i -=1\n        }\n    }\n    return a.length\n}"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    for(let i = 0; i < a.length; i++) {\n        if(a[i] * a[i+1] <= k) {\n            a[i+1] = a[i] * a[i+1]\n            a.shift()\n            i -=1\n        }\n    }\n    return a.length\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50080331",
    "question_1": {
        "score": "0/75",
        "code_language": "java15",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    for(let i = 0; i < a.length; i++) {\n        if(a[i] * a[i+1] <= k) {\n            a[i+1] = a[i] * a[i+1]\n            a.shift()\n            i -=1\n        }\n    }\n    return a.length\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "java15",
        "candidate_code": "\nclass Result {\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n\n    public static long stringProblem(String s) {\n    // Write your code here\n\n    }\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50104082",
    "question_1": {
        "score": "0/75",
        "code_language": "Swift",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a: [Int], k: Int) -> Int {\n\n    var sortedArr = a\n    var count = 0\n    sortedArr.sort()\n    \n    var max = 0\n    var temp = 0\n    var maxIdx = a.count-1\n\n    for elem in 0..<a.count {\n        if sortedArr[0] * sortedArr[1] <= k {\n            count += 1\n            temp = sortedArr[0] * sortedArr[1]\n        } else {\n            for i in 0..<maxIdx {\n                if sortedArr[0] * sortedArr[i] <= k {\n                    count += 1\n                    break\n                }\n            }\n        }\n        maxIdx = sortedArr.count\n        sortedArr.remove(at: 0)\n        sortedArr.remove(at: 1)\n        sortedArr.insert(temp, at: 0)\n    }\n    \n    return count\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Swift",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s: String) -> Int {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50152474",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    for(let i = 1; i < a.lenght; i++) {\n        \n    }\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    for(let i = 1; i < a.lenght; i++) {\n        \n    }\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50094955",
    "question_1": {
        "score": "75/75",
        "code_language": "C++20",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nint getMinLength(vector<int> a, int k) {\n    int size = a.size();\n    int el = 0;\n    int i = 0;\n    long long prev;\n    for(int i = 0;i < size;i++){\n        if (i == 0){\n            prev = a[0];\n        }else{\n            if (prev * a[i] <= k){\n                prev = prev * a[i];\n            }else if(prev <= k){\n                el++;\n                prev = a[i];\n            }\n        }\n    }\n    if (prev <= k) el++;\n    return el;\n}\n"
    },
    "question_2": {
        "score": "4/100",
        "code_language": "C++20",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nbool isVowel(char a){\n    return (a == 'a') || (a == 'i') || (a == 'u') || (a == 'e') || (a == 'o');\n}\n\nbool isSat(map<char, int> &m){\n    return (m.find('a') != m.end() && m['a'] >= 1) && (m.find('i') != m.end() && m['i'] >= 1) && (m.find('u') != m.end() && m['u'] >= 1) && (m.find('e') != m.end() && m['e'] >= 1) && (m.find('o') != m.end() && m['o'] >= 1);\n}\n\nint sliding(int left, int right, string& s){\n    cout << left << \" \" << right << endl;\n    if (left > right || left == -1) return 0;\n    map<char, int> m;\n    int sum = 0;\n    int l = left;\n    for(int r = left;r <= right;r++){\n        m[s[r]]++;\n        while(isSat(m)){\n            sum += (r - right + 1);\n            m[s[l]]--;\n            l++;\n        }\n    }\n    return sum;\n}\n\nlong stringProblem(string s) {\n    // sliding window\n    int left = -1;\n    long long sum = 0;\n    for(int i = 0;i < s.size();i++){\n        if (!isVowel(s[i])) {\n            long long sub = sliding(left, i - 1, s);\n            left = -1; \n            sum += sub;\n        }else{\n            if (left == -1){\n                left = i;\n            }\n        }\n        // if (isVowel(s[i]) && i == s.size() - 1){\n        //     sum += sliding(left, i, s);\n        // }    \n    }\n    // sum += sliding(left, s.size() - 1, s);\n    return sum;    \n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50122125",
    "question_1": {
        "score": "5/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    const newA = [];\n    for(let i = 0; i < a.length; i++) {\n        let total = a[i] * [i+1];\n        console.log(a[i], ' * ', a[i+1], ' = ', total);\n        if(!(total > 20)) {\n            newA.push(total);\n        }\n    }\n    \n    return newA;\n}"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50130807",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50149040",
    "question_1": {
        "score": "10/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let pointer1 = 0\n    let pointer2 = pointer1 + 1\n    let isDone = false\n    \n    console.log(a)\n    \n    while(!isDone){\n        if(!a[pointer1] || !a[pointer2]) isDone = true\n        const sum = a[pointer1] * a[pointer2]\n        if(sum <= k){\n            a.splice(pointer1, 1)\n            a.splice(pointer2, 1)\n            a[a.length] = sum\n        }else{\n            pointer1 += 1\n            pointer2 = pointer1 + 1\n        }\n        console.log(a)\n        return a.length\n        \n    }\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50147814",
    "question_1": {
        "score": "0/75",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k):\n    # Write your code here\n    a = [2,3,3,7,3,5]\n    k =  20\n    for i in range a:\n        if i < k :\n            print(a[i])\n    \n"
    },
    "question_2": {
        "score": "0/100",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50148831",
    "question_1": {
        "score": "0/75",
        "code_language": "Swift",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a: [Int], k: Int) -> Int {\n    // Write your code here\n\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Swift",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s: String) -> Int {\n    // Write your code here\n    var countVowel: Int = 0\n    let myVowel = CharacterSet(charactersIn: \"aeiou\")\n    \n    s.forEach { char in\n        let set = CharacterSet(charactersIn: String(char))\n        if set.isSubset(of: myVowel) {\n            countVowel += 1\n        }\n    }\n    return (countVowel)\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50113531",
    "question_1": {
        "score": "1/75",
        "code_language": "Typescript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a: number[], k: number): number {\n    // Write your code here\n    let length: number = 0\n\n    a.reduce((acc, curr) => {\n        if ((acc + curr) <= k) {\n            length += 1\n        }\n        return acc + curr\n    })\n    \n    return length\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Typescript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a: number[], k: number): number {\n    // Write your code here\n    let length: number = 0\n\n    a.reduce((acc, curr) => {\n        if ((acc + curr) <= k) {\n            length += 1\n        }\n        return acc + curr\n    })\n    \n    return length\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50293712",
    "question_1": {
        "score": "6/75",
        "code_language": "C",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nint getMinLength(int a_count, int* a, int k) {\n\n    int b[a_count];\n    int bi;\n    int found;\n    int *c;\n    int cc;\n    int *d;\n    int e[a_count];\n    \n    c = a;\n    cc = a_count;\n    d = b;\n    \n    loop:\n\n    found = 0;\n    bi = 0;\n\n    for ( int ai = 0; ai < (cc - 1); ai++)\n    {\n        int product = c[ai] * c[ai + 1];\n        \n        if (product < k)\n        {\n            d[bi++] = product;\n            \n            while (++ai < cc)\n            {\n                d[bi++] = c[ai++];\n            }\n            \n            found = 1;\n            \n            break;\n        }\n    }\n    \n    if (found == 0)\n    {\n        return cc;\n    }\n    \n    c = d;\n    cc = bi;\n    \n    if (d == b)\n    {\n        d = e;\n    }\n    else\n    {\n        d = b;\n    }\n    \n    goto loop;\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "C",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nlong stringProblem(char* s) {\n\n    char vowels[] = {'a','i','u','e','o'};\n    int ss;\n    char *p;\n    long result;\n    char buffer[strlen(s) + 1];\n    int bi;\n    long r;\n    \n    r = 0;\n    bi = 0;\n    for (int a = 0; a < strlen(s); a++)\n    {\n        p = &s[a];\n        while (*p)\n        {\n            char *vp = vowels;\n            int found = 0;\n            while (*vp)\n            {\n                if (*p == *vp)\n                {\n                    found = 1;\n                    \n                    break;\n                }\n                vp++;\n            }\n            \n            if (!found)\n            {\n                break;\n            }\n            \n            buffer[bi++] = *p;\n            \n            p++;\n        }\n        \n        if (bi)\n        {\n            \n        }\n    }\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50192669",
    "question_1": {
        "score": "43/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    console.log(a);\n    console.log(k, \"ini k\");\n    \n    let mark = 0;\n    let total = 0;\n    // for(let first = 0; first < a.length;first++){\n    //     let data = a[first] * a[first+1];\n    //     console.log(data, \"dari index\",first);\n    //         if(data <= k){\n    //             a[first] = data;\n    //             a = a.splice(1,a[first+1]);\n    //             first \n    //         }\n            \n    //     console.log(a, \"dari index\",first);\n            \n    //         // if(a[0] * a[1] <= k){\n    //         //     first = 0;\n    //         // }\n    // }\n    \n    \n    while(mark < a.length){\n        let data = a[mark] * a[mark+1];\n        console.log(data, \"dari index\",mark);\n            if(data <= k){\n                a[mark] = data;\n                a.splice(mark+1,1); \n            } else {\n                mark++;    \n            }\n            \n        console.log(a,\"ini array\");\n            \n    }\n    console.log(a);\n    \n    \n    \n    return a.length;\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n    \n    const vowels = ['a','i','u','e','o'];\n    const n = s.length;\n    let count  = 0;\n    \n    for (let i =0; )\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50291938",
    "question_1": {
        "score": "7/75",
        "code_language": "Typescript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a: number[], k: number): number {\n    // Write your code here\n    let result = 0;\n    let i = 0;\n    let j = k - 1;\n    \n    while( i < j){\n        if( a[i] < a[j]){\n            a[i + 1] += a[i];\n            i++;\n            result++;\n        }else if(a[i] > a[j]){\n            a[j-1] += a[j];\n            j--;\n            result++;\n        }else{\n            i++;\n            j--;\n        }\n    }\n    \n    return result;\n    \n\n}\n"
    },
    "question_2": {
        "score": "64/100",
        "code_language": "Typescript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a: number[], k: number): number {\n    // Write your code here\n    let result = 0;\n    let i = 0;\n    let j = k - 1;\n    \n    while( i < j){\n        if( a[i] < a[j]){\n            a[i + 1] += a[i];\n            i++;\n            result++;\n        }else if(a[i] > a[j]){\n            a[j-1] += a[j];\n            j--;\n            result++;\n        }else{\n            i++;\n            j--;\n        }\n    }\n    \n    return result;\n    \n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50258061",
    "question_1": {
        "score": "67/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    let start = 0;\n    let end = start + 1;\n    while (start < a.length) {\n        const prod = a[start] * a[end];\n        if (prod <= k) {\n            a.splice(start, 2, prod);\n        } else {\n            start++;\n            end++;\n        }\n    }\n    \n    return a.length;\n}\n"
    },
    "question_2": {
        "score": "72/100",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    let start = 0;\n    let end = 0;\n    let current = new Set();\n    let vowels = new Set(['a', 'i', 'u', 'e', 'o']);\n    let count = 0;\n    while (start < s.length) {\n        if (vowels.has(s[end])) {\n            current.add(s[end]);\n            \n            if (current.has(\"a\") && current.has(\"i\") && current.has(\"u\") && current.has(\"e\") && current.has(\"o\")) {\n                count++;\n            }\n            \n            end++;\n        } else {\n            start++;\n            end = start;\n            current = new Set();\n        }\n    }\n    \n    return count;\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50205534",
    "question_1": {
        "score": "8/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    let start = 0;\n    let end = 0;\n    let current = new Set();\n    let vowels = new Set(['a', 'i', 'u', 'e', 'o']);\n    let count = 0;\n    while (start < s.length) {\n        if (vowels.has(s[end])) {\n            current.add(s[end]);\n            \n            if (current.has(\"a\") && current.has(\"i\") && current.has(\"u\") && current.has(\"e\") && current.has(\"o\")) {\n                count++;\n            }\n            \n            end++;\n        } else {\n            start++;\n            end = start;\n            current = new Set();\n        }\n    }\n    \n    return count;\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n    \n    return 'running out of time sorry'\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50204907",
    "question_1": {
        "score": "67/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n  let i = 0;\n  let j = 1;\n\n  while (i < a.length && j < a.length) {\n    if (a[i] * a[j] <= k) {\n      a[i] *= a[j];\n\n      a.splice(j, 1);\n    } else {\n      i++;\n\n      j++;\n    }\n  }\n\n  return a.length;\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "C++20",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nlong stringProblem(string s) {\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50230452",
    "question_1": {
        "score": "67/75",
        "code_language": "JavaScript",
        "candidate_code": "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    let i = 0;\n    while (i < a.length) {\n        if ((a[i]*a[i+1]) <= k) {\n            a[i]=(a[i]*a[i+1]); a.splice(i+1,1)\n        } else {\n            i++    \n        }\n    }\n    return a.length;\n}\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const aCount = parseInt(readLine().trim(), 10);\n\n    let a = [];\n\n    for (let i = 0; i < aCount; i++) {\n        const aItem = parseInt(readLine().trim(), 10);\n        a.push(aItem);\n    }\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = getMinLength(a, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    let i = 0;\n    while (i < a.length) {\n        if ((a[i]*a[i+1]) <= k) {\n            a[i]=(a[i]*a[i+1]); a.splice(i+1,1)\n        } else {\n            i++    \n        }\n    }\n    return a.length;\n}\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const aCount = parseInt(readLine().trim(), 10);\n\n    let a = [];\n\n    for (let i = 0; i < aCount; i++) {\n        const aItem = parseInt(readLine().trim(), 10);\n        a.push(aItem);\n    }\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = getMinLength(a, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50258431",
    "question_1": {
        "score": "5/75",
        "code_language": "Go",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // Write your code here\n    arrLen := len(a)\n    res := make([]int32, 0)\n    if arrLen < 2 {\n        return int32(arrLen)\n    }\n    for i := 0; i < arrLen; i++ {\n        if i < (arrLen-2) {\n            res[i] = (a[i]*a[i+1])\n        }\n        continue\n    }\n    return int32(len(res))\n}\n"
    },
    "question_2": {
        "score": "72/100",
        "code_language": "Go",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunc stringProblem(s string) int64 {\n   var counter int64\n   loop:\n   for x := 0; x< len(s); x++ {\n       a, i, u, e, o := 0,0,0,0,0\n       for y := x; y < len(s); y++ {\n           switch s[y] {\n               case 'a':\n               a++\n               case 'i':\n               i++\n               case 'u':\n               u++\n               case 'e':\n               e++\n               case 'o':\n               o++\n               default:\n               continue loop\n           }\n           if a >0 && i > 0 && u > 0 && e > 0 && o > 0 {\n               counter++\n           }\n       }\n   }\n    return counter\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50235826",
    "question_1": {
        "score": "67/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    console.log(\"THIS\", a, k)\n    let n = a.length;\n  let i = 0;\n  while (i < n - 1) {\n    if (a[i] * a[i+1] <= k) {\n      a[i+1] = a[i] * a[i+1];\n      a.splice(i, 1);\n      n--;\n      i = Math.max(0, i - 1);\n    } else {\n      i++;\n    }\n  }\n  return n;\n}\n\n\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n    console.log(\"pass this question\")\n}"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50265464",
    "question_1": {
        "score": "12/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let loop = true\n    let currentIndex = 0\n    let newArr = [...a]\n    while(loop) {\n        if (currentIndex > newArr.length - 1) {\n            loop = false\n            break\n        }\n        \n        const multipleItem = newArr.length - 1 === currentIndex ? newArr[currentIndex - 1] : newArr[currentIndex + 1]\n        const newItem = newArr[currentIndex] * multipleItem\n        console.log('//', newArr, currentIndex, newArr.length === currentIndex, newArr[currentIndex - 1])\n        \n        \n        if (newArr[currentIndex] >= k || newItem > k || !newItem) {\n            currentIndex += 1\n        } else {\n            \n            if (newArr.length === currentIndex) {\n                newArr = [...newArr.splice(0, currentIndex - 2), newItem]\n            } else {\n                newArr = [...newArr.splice(0, currentIndex - 1), newItem, ...newArr.splice(currentIndex + 2)]\n            }\n            \n        }\n    }\n    \n    return newArr.length\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50316458",
    "question_1": {
        "score": "3/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // // Write your code here\n    const len = a.length;\n    const result = [];\n    \n    let i = 0;\n    while(i < len) {\n        if(i === len-1){\n            result.push(a[i])\n            break;\n        }\n        \n        if(a[i] * a[i +1] <=k){\n            result.push(a[i] * a[i + 1]);\n            i += 2\n        } else {\n            result.push(a[i])\n            i += 1\n        }\n    }\n    \n    return result.length - 1;\n}"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringProblem(s) {\n    // Write your code here\n    let counter = 0;\n    let left = 0;\n    const used = new Set()\n    const vowels = new Set(['a', 'i', 'u', 'e', 'o'])\n    \n    const vowelIndices = [[],[],[],[],[],]\n    \n    for(let i = 0;  i < s.length; i++){\n        const voewelIndex = Array.from(vowels).indexOf(s[i])\n        \n        if(voewelIndex !== -1){\n            vowelIndices[voewelIndex].push(i)\n        }\n        \n    }\n    \n    for(let right = 0; right < s.length; right++){\n        if(vowels.has(s[right])){\n            used.add(s[right])\n        }\n        \n        if(used.size === 5){\n            while(!vowels.has(s[left]) || vowelIndices[Array.from(vowels).indexOf(s[left])][0] < left){\n            if(vowels.has(s[left])){\n                vowelIndices[Array.from(vowels).indexOf(s[left]).shift()]\n            }\n            left++\n        }\n        \n        count += s.length - right\n        count -= s.length - vowelIndices[Array.from(vowels).indexOf(s[left])][0]\n        \n        left++\n    }\n    \n    return counter;\n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "50342523",
    "question_1": {
        "score": "31/75",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k):\n    # Write your code here\n    def mergeOneTime(paramList,paramNum):\n        '''\n            merge the array one time by num\n            Params:\n                paramList(list)\n                paramNum(int)\n            return \n                resultList(list)\n        '''\n        resultList = []\n        i = 0\n        while(i<len(paramList)):\n            # print(i)\n            if i == len(paramList)-1:\n                resultList.append(paramList[i])\n                break\n            j=i+1\n            # print(paramList[i]*paramList[j])\n            if paramList[i]*paramList[j]<=paramNum:\n                resultList.append(paramList[i]*paramList[j])\n                i=i+2\n            else:\n                resultList.append(paramList[i])\n                i=i+1\n            \n        # print(resultList)\n        return resultList\n    \n    lenCur = len(a)\n    a = mergeOneTime(a,k)\n    lenNext = len(a)\n    while(lenCur != lenNext):\n        lenCur = lenNext\n        a = mergeOneTime(a,k)\n        lenNext = len(a)\n    return len(a)\n            \n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Python3",
        "candidate_code": "\n#\n# Complete the 'getMinLength' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER k\n#\n\ndef getMinLength(a, k):\n    # Write your code here\n    def mergeOneTime(paramList,paramNum):\n        '''\n            merge the array one time by num\n            Params:\n                paramList(list)\n                paramNum(int)\n            return \n                resultList(list)\n        '''\n        resultList = []\n        i = 0\n        while(i<len(paramList)):\n            # print(i)\n            if i == len(paramList)-1:\n                resultList.append(paramList[i])\n                break\n            j=i+1\n            # print(paramList[i]*paramList[j])\n            if paramList[i]*paramList[j]<=paramNum:\n                resultList.append(paramList[i]*paramList[j])\n                i=i+2\n            else:\n                resultList.append(paramList[i])\n                i=i+1\n            \n        # print(resultList)\n        return resultList\n    \n    lenCur = len(a)\n    a = mergeOneTime(a,k)\n    lenNext = len(a)\n    while(lenCur != lenNext):\n        lenCur = lenNext\n        a = mergeOneTime(a,k)\n        lenNext = len(a)\n    return len(a)\n            \n"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50468584",
    "question_1": {
        "score": "23/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let counter = 0;\n    console.log(a)\n    let [n,...data] = a\n    while (counter < data.length){\n        if (counter +1 < data.length){\n            const newData = data[counter] * data[counter+1]\n            if (newData <= k ){\n                data[counter+1] = newData;\n                data.splice(counter,1);\n                continue;\n            }\n        }\n        counter++\n    }\n    return data.length;\n    // for (let x=0;x <= a.length-1;){\n    //     for (let i = 1;i<= a.length -1;){\n    //         console.log(a);\n    //         const multiple = a[x] * a[i];\n          \n    //         if (multiple <= k){\n                      \n    //         }\n    //         else { \n    //             x++;\n    //             i++;\n    //         }\n            \n    //     }\n    //     return counter\n    // }\n\n}\n"
    },
    "question_2": {
        "score": "43/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMaxProfit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction getMaxProfit(a) {\n    // Write your code here\n   let  [n,...prices] = a;\n    let buy = 0 \n    let sell  = 1 \n    let profit = 0\n    while (sell < prices.length){\n        if (prices[buy] < prices[sell]){\n            let currentProfit  = prices[sell] - prices[buy];\n            profit = Math.max(currentProfit,profit); \n        }\n        else { \n            buy = sell;\n        }\n        sell++;\n    }\n    return profit;\n}\n"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50405489",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n\n}\n"
    },
    "question_2": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMaxProfit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction getMaxProfit(a) {\n    // Write your code here\n    let profit = 0;\n    for(let i=0; i < a.length; i ++){\n        if(a[i] > a[i + 1]){\n            let result = a[i] - a[i + 1];\n            if(result > 0){\n                profit = result;\n            }else{\n                profit = -1\n            }\n        }\n    }\n    return profit;\n\n}\n"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50461110",
    "question_1": {
        "score": "51/75",
        "code_language": "Java8",
        "candidate_code": "class Result {\n\n    /*\n     * Complete the 'getMinLength' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY a\n     *  2. INTEGER k\n     */\n\n    public static int getMinLength(List<Integer> a, int k) {\n    // Write your code here\n        int n = a.size();\n        int i = 0 , j = 1;\n        while(j < n){\n            int prod = a.get(i) * a.get(j);\n            if(prod <= k){\n                a.set(i, prod);\n                j++;\n            } else {\n                i++;\n                a.set(i, a.get(j));\n                j++;\n            }\n        }\n        return i+1;\n    \n    }\n\n}"
    },
    "question_2": {
        "score": "70/75",
        "code_language": "Java8",
        "candidate_code": "class Result {\n\n    /*\n     * Complete the 'getMaxProfit' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts INTEGER_ARRAY a as parameter.\n     */\n\n    public static int getMaxProfit(List<Integer> a) {\n    // Write your code here\n        int n = a.size();\n        int minPrice = Integer.MAX_VALUE;\n        int maxProfit = -1;\n        for (int i = 0; i < n; i++){\n            if(a.get(i) < minPrice){\n                minPrice = a.get(i);\n            } else {\n                int profit = a.get(i) - minPrice;\n                if (profit > maxProfit) {\n                    maxProfit = profit;\n                }\n            }\n        }\n        return maxProfit;\n    }\n\n}"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50428364",
    "question_1": {
        "score": "0/75",
        "candidate_code": "No attempts"
    },
    "question_2": {
        "score": "0/75",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50429535",
    "question_1": {
        "score": "15/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let arrayReduced = a\n    while(arrayReduced.length > 1) {\n        for(let i = 0; i < arrayReduced.length; i++) {\n            if(a[i]*a[i+1] <= k) {\n                arrayReduced[i] = a[i]*a[i+1]\n                arrayReduced.splice(i+1, 1)\n                break;\n            }\n        }\n        console.log(arrayReduced)\n        break;\n    }\n    return arrayReduced.length\n}\n"
    },
    "question_2": {
        "score": "53/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let arrayReduced = a\n    while(arrayReduced.length > 1) {\n        for(let i = 0; i < arrayReduced.length; i++) {\n            if(a[i]*a[i+1] <= k) {\n                arrayReduced[i] = a[i]*a[i+1]\n                arrayReduced.splice(i+1, 1)\n                break;\n            }\n        }\n        console.log(arrayReduced)\n        break;\n    }\n    return arrayReduced.length\n}\n"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50463279",
    "question_1": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    \n    console.log(a)\n    let res = 0\n    \n    let resStr = ''\n    let resArr = []\n    \n    // Write your code here\n    for (let i = 0; i < a.length; i++){\n        let tempRes = 0\n        if(i+1 != a.length){\n            resStr += `${a[i]} Compare ${a[i+1]} |`\n            tempRes = a[i] * a[i+1]\n        }\n        if(tempRes <= k){\n            i+1\n            resArr.push(tempRes)\n        }else{\n            resArr.push(a[i])\n        }\n    }\n    return resStr;\n}"
    },
    "question_2": {
        "score": "43/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMaxProfit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction getMaxProfit(a) {\n    let highest = null\n    let highestIndex = null\n    let lowest = null\n    let lowestIndex = null\n    // Write your code here\n    \n    //find highest\n    for (let i = 0; i < a.length; i++) {\n        if(highestIndex == null){\n            highest = a[i]\n            highestIndex = i\n        }else{\n            for (let j = highestIndex; j < a.length; j++){\n                if(a[j] > highest){\n                    highest = a[j]\n                    highestIndex = j\n                    j = a.length\n                }\n            }\n        }\n    }\n    \n    //find lowest\n    for (let i = 0; i < highestIndex; i++) {\n        if(lowestIndex == null){\n            lowest = a[i]\n            lowestIndex = i\n        }else{\n            for (let j = lowestIndex; j < highestIndex; j++){\n                if(a[j] < lowest){\n                    lowest = a[j]\n                    lowestIndex = j\n                    j = highestIndex\n                }\n            }\n        }\n    }\n    \n    var result = highest - lowest;\n    \n    return result\n}\n"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50520631",
    "question_1": {
        "score": "0/75",
        "code_language": "Java8",
        "candidate_code": "\n/*\n * Complete the 'getMaxProfit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction getMaxProfit(a) {\n    let highest = null\n    let highestIndex = null\n    let lowest = null\n    let lowestIndex = null\n    // Write your code here\n    \n    //find highest\n    for (let i = 0; i < a.length; i++) {\n        if(highestIndex == null){\n            highest = a[i]\n            highestIndex = i\n        }else{\n            for (let j = highestIndex; j < a.length; j++){\n                if(a[j] > highest){\n                    highest = a[j]\n                    highestIndex = j\n                    j = a.length\n                }\n            }\n        }\n    }\n    \n    //find lowest\n    for (let i = 0; i < highestIndex; i++) {\n        if(lowestIndex == null){\n            lowest = a[i]\n            lowestIndex = i\n        }else{\n            for (let j = lowestIndex; j < highestIndex; j++){\n                if(a[j] < lowest){\n                    lowest = a[j]\n                    lowestIndex = j\n                    j = highestIndex\n                }\n            }\n        }\n    }\n    \n    var result = highest - lowest;\n    \n    return result\n}\n"
    },
    "question_2": {
        "score": "0/75",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50502667",
    "question_1": {
        "score": "6/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n  let ans = 0; // Initialize result\n   \n        // Start from two corners\n        for (let i=0,j=k-1; i<=j;)\n        {\n            // If corner elements are same,\n            // problem reduces arr[i+1..j-1]\n            if (a[i] == a[j])\n            {\n                i++;\n                j--;\n            }\n   \n            // If left element is greater, then\n            // we merge right two elements\n            else if (a[i] > a[j])\n            {\n                // need to merge from tail.\n                j--;\n                a[j] *= a[j+1] ;\n                ans++;\n            }\n   \n            // Else we merge left two elements\n            else\n            {\n                i++;\n                a[i] *= a[i-1];\n                ans++;\n            }\n        }\n   \n        return ans;\n}\n"
    },
    "question_2": {
        "score": "53/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMaxProfit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction getMaxProfit(a) {\n    // Write your code here\n    if(a===[]){\n        return 0;\n    }\n    let profit=0;\n    let i = 0;\n    while(i<a.length){\n        let cp=a[i];\n        let j=i+1\n        while(j<a.length){\n            let sp = a[j];\n            profit = Math.max(profit,sp-cp);\n            j++;\n        }\n        i++\n    }\n    return profit;\n}\n"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50445437",
    "question_1": {
        "score": "11/75",
        "code_language": "Go",
        "candidate_code": "package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\n\nfunc getMinLength(a []int32, k int32) int32 {\n    // var found int32\n    for i := 0; i < len(a); i++ {\n        for y := i+1; y < len(a); y++ {\n            if a[i] * a[y] <= k {\n                copy(a[y:], a[y+1:])\n                a[len(a)-1] = 0\n                a = a[:len(a)-1]\n                i=0\n                break\n            }\n        }\n    }\n    return int32(len(a))\n}func main() {\n    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)\n\n    stdout, err := os.Create(os.Getenv(\"OUTPUT_PATH\"))\n    checkError(err)\n\n    defer stdout.Close()\n\n    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)\n\n    aCount, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)\n    checkError(err)\n\n    var a []int32\n\n    for i := 0; i < int(aCount); i++ {\n        aItemTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)\n        checkError(err)\n        aItem := int32(aItemTemp)\n        a = append(a, aItem)\n    }\n\n    kTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)\n    checkError(err)\n    k := int32(kTemp)\n\n    result := getMinLength(a, k)\n\n    fmt.Fprintf(writer, \"%d\\n\", result)\n\n    writer.Flush()\n}\n\nfunc readLine(reader *bufio.Reader) string {\n    str, _, err := reader.ReadLine()\n    if err == io.EOF {\n        return \"\"\n    }\n\n    return strings.TrimRight(string(str), \"\\r\\n\")\n}\n\nfunc checkError(err error) {\n    if err != nil {\n        panic(err)\n    }\n}\n"
    },
    "question_2": {
        "score": "75/75",
        "code_language": "Go",
        "candidate_code": "func getMaxProfit(a []int32) int32 {\n    var max int32\n    var set int32\n    max = 0\n    for i := 0; i < len(a); i++ {\n        for y := i+1; y < len(a); y++ {\n            set = a[y]-a[i]\n            if set > max {\n                max = set\n            }\n        }\n    }\n    if max <= 0 {\n        return -1\n    } else {\n        return max\n    }\n}\n"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50460600",
    "question_1": {
        "score": "67/75",
        "code_language": "JavaScript",
        "candidate_code": "func getMaxProfit(a []int32) int32 {\n    var max int32\n    var set int32\n    max = 0\n    for i := 0; i < len(a); i++ {\n        for y := i+1; y < len(a); y++ {\n            set = a[y]-a[i]\n            if set > max {\n                max = set\n            }\n        }\n    }\n    if max <= 0 {\n        return -1\n    } else {\n        return max\n    }\n}\n"
    },
    "question_2": {
        "score": "53/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let totalData = a.length;\n    let i = 0;\n    \n    while (i < totalData - 1) {\n        let temp = a[i] * a[i + 1];\n        if (temp <= k) {\n            a.splice(i, 2, temp);\n            totalData--;\n            i = Math.max(0, i - 1);\n        } else {\n            i++;\n        }\n    }\n    \n    return totalData;\n}\n"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50515671",
    "question_1": {
        "score": "10/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let totalData = a.length;\n    let i = 0;\n    \n    while (i < totalData - 1) {\n        let temp = a[i] * a[i + 1];\n        if (temp <= k) {\n            a.splice(i, 2, temp);\n            totalData--;\n            i = Math.max(0, i - 1);\n        } else {\n            i++;\n        }\n    }\n    \n    return totalData;\n}\n"
    },
    "question_2": {
        "score": "0/75",
        "candidate_code": "No attempts"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50473660",
    "question_1": {
        "score": "6/75",
        "code_language": "Java8",
        "candidate_code": "class Result {\n\n    /*\n     * Complete the 'getMinLength' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY a\n     *  2. INTEGER k\n     */\n\n    public static int getMinLength(List<Integer> a, int k) {\n    // Write your code here\n        List<Integer> temp = a;\n        List<Integer> result = new ArrayList<Integer>();\n        Boolean stillPossibleMerge = true;\n        while(stillPossibleMerge){\n            result = possibleMerge(a, k);\n            if(result.size() != a.size()){\n                stillPossibleMerge = false;\n            }\n        }\n        return result.size();\n    }\n    \n   static List<Integer> possibleMerge(List<Integer> a, int k) {\n        int indexA = -1;\n        int indexB = -1;\n        for(int i=0; i< a.size();i++){\n            for(int j=1; j< a.size();j++){\n                int merge = a.get(i) + a.get(j);\n                if(merge <= k){\n                    indexA =i;\n                    indexB= j;\n                    break;\n                }\n            }\n        }\n         List<Integer> result = new ArrayList<Integer>();\n         for(int i=0; i< a.size();i++){\n             if(i != indexA && i != indexB){\n                result.add(a.get(i));    \n             }\n             \n         }\n         \n        return result;\n    }\n    \n\n}"
    },
    "question_2": {
        "score": "32/75",
        "code_language": "Java8",
        "candidate_code": "class Result {\n\n    /*\n     * Complete the 'getMaxProfit' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts INTEGER_ARRAY a as parameter.\n     */\n\n    public static int getMaxProfit(List<Integer> a) {\n    // Write your code here\n        int maxProfit = -1;\n        int prevProfit = -1;\n            for(int i = 0 ; i< a.size();i ++){\n                for(int j = 0; j< a.size();j++){\n                    int result = a.get(i) - a.get(j);\n                    if(result >= maxProfit && result >= prevProfit){\n                        maxProfit = result;\n                    }\n                    prevProfit = result;\n                }\n            }\n        \n        return maxProfit;\n    }\n\n}"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50518712",
    "question_1": {
        "score": "6/75",
        "code_language": "JavaScript",
        "candidate_code": "class Result {\n\n    /*\n     * Complete the 'getMaxProfit' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts INTEGER_ARRAY a as parameter.\n     */\n\n    public static int getMaxProfit(List<Integer> a) {\n    // Write your code here\n        int maxProfit = -1;\n        int prevProfit = -1;\n            for(int i = 0 ; i< a.size();i ++){\n                for(int j = 0; j< a.size();j++){\n                    int result = a.get(i) - a.get(j);\n                    if(result >= maxProfit && result >= prevProfit){\n                        maxProfit = result;\n                    }\n                    prevProfit = result;\n                }\n            }\n        \n        return maxProfit;\n    }\n\n}"
    },
    "question_2": {
        "score": "21/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let num = 0;\n    let prevIndex = 0;\n    console.log(a,k)\n    console.log(a.length)\n    for (let i = 0;i<a.length;i++) {\n        \n        if (i === 0) {\n            num = a[i];\n        } else {\n            num = num*a[i];\n        }\n        if (num > k) {\n            console.log(i)\n            return a.length - i;\n        }       \n    }\n\n}\n\n/**\n * input : a= [1,2,1,3,6,1]; k = 6\n *  a[0]* a[1] >>> 1*2 = 2\n *  res * a[2] >>> 2*1 = 2\n *  res * a[3] >>> 2*3 = 6\n *  \n * return the index (3)\n */\n"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50517366",
    "question_1": {
        "score": "75/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    const finalArray = [];\n    let tempVal = 1;\n    for(let i=0; i<a.length; i++){\n        if(tempVal*a[i] <= k) {\n            tempVal=tempVal*a[i];\n        } else {\n            finalArray.push(tempVal);\n            tempVal = a[i];\n        }\n    }\n    finalArray.push(tempVal);\n    return finalArray.length;\n}\n"
    },
    "question_2": {
        "score": "65/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMaxProfit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction getMaxProfit(a) {\n    let minBuy = 10000;   \n    let margin = 0;     \n    for(let i=0; i<a.length; i++) {\n        if(a[i] < minBuy) minBuy = a[i];\n        if(a[i] - minBuy > margin) {\n            margin = a[i] - minBuy;\n        }\n    }\n    return margin === 0 ? -1 : margin;\n}"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50512982",
    "question_1": {
        "score": "51/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    console.log({ a })\n    // Write your code here\n    if (!Array.isArray(a)) throw new Error('First parameter must be an array.')\n    let result = [...a];\n    let stop = false\n    let index = 0;\n    while (stop === false) {\n        const isLastIndex = index + 1 === result.length;\n        if (isLastIndex) {\n            // stop the loop\n            stop = true;\n            continue;\n        }\n        \n        const firstNumber = result[index];\n        const secondNumber = result[index + 1];\n        \n        const mergedNumber = firstNumber * secondNumber;\n        if (mergedNumber <= k) {\n            // remove second number\n            result.splice(index + 1, 1);\n            // replace first number with merged number\n            result[index] = mergedNumber;\n            \n            // restart the loop for the first index since it's a new array\n            index = 0;\n        } else index++; \n    }\n    return result.length;\n}\n"
    },
    "question_2": {
        "score": "53/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMaxProfit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction getMaxProfit(a) {\n    let maxProfit = 0;\n    for (let i = 0; i < a.length; i++) {\n        const currentStockPrice = a[i];\n        for (let j = i; j < a.length; j++) {\n            const nextStockPrice = a[j + 1];\n            const profit = nextStockPrice - currentStockPrice;\n            if (profit > maxProfit) {\n                maxProfit = profit;\n            }\n        }\n    }\n    return maxProfit;\n}\n"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50518734",
    "question_1": {
        "score": "15/75",
        "code_language": "JavaScript",
        "candidate_code": "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nconst checkNeighbour = (item, secondValue, constraint) => {\n    const productResult = item * secondValue\n    if (productResult >= constraint){\n        return productResult;\n    }\n    return item;\n}\n\nfunction getMinLength(a, k) {\n    // Write your code here\n    let left = 0;\n    let right = 0;\n    let sum = 0;\n    let minLength = Infinity;\n    \n    while (right < a.length){\n        sum += a[right];\n        while (sum >= k){\n            minLength = Math.min(minLength, right - left + 1);\n            sum -= a[left];\n            left++;\n        }\n        right++;\n    }\n    \n    const x = minLength === Infinity ? 0 : minLength;\n    return x + 1;\n}\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const aCount = parseInt(readLine().trim(), 10);\n\n    let a = [];\n\n    for (let i = 0; i < aCount; i++) {\n        const aItem = parseInt(readLine().trim(), 10);\n        a.push(aItem);\n    }\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = getMinLength(a, k);\n    \n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
    },
    "question_2": {
        "score": "0/75",
        "code_language": "JavaScript",
        "candidate_code": "\n/*\n * Complete the 'getMaxProfit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction getMaxProfit(a) {\n    // Write your code here\n    \n}\n"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50527264",
    "question_1": {
        "score": "0/75",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength($a, $k) {\n    // Write your code here\n    // foreach($a => $numberFromArray) {\n    //     $product = $numberFromArray * next($a);\n    //     if() {\n            \n    //     }\n    // }\n    $productsAreBigger = true;\n    while($productsAreBigger) {\n        next($a)\n        if(true) {\n            $productsAreBigger = false;\n        }\n    }\n\n}\n"
    },
    "question_2": {
        "score": "43/75",
        "code_language": "PHP",
        "candidate_code": "\n/*\n * Complete the 'getMaxProfit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction getMaxProfit($a) {\n    // Write your code here\n    $heighestSellingingPrice = max($a);\n    \n    $heighestSellingIndex = array_search($heighestSellingingPrice, $a);\n    \n    $stockHistory = array_slice($a, 0, $heighestSellingIndex +1);\n    $buyingPrice = min($stockHistory);\n\n    $profit = $heighestSellingingPrice - $buyingPrice;\n    if($profit < 0) {\n        return -1;\n    }\n    return $profit;\n}\n"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50536088",
    "question_1": {
        "score": "75/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    var arr = [];\n    for(var i = 0; i< a.length; i++) {\n        let number = a[i]\n        while(arr.length > 0 && number * arr[arr.length-1] <= k) {\n            number = number * arr.pop()\n        }\n        arr.push(number);\n    }\n    return arr.length\n}"
    },
    "question_2": {
        "score": "70/75",
        "code_language": "JavaScript",
        "candidate_code": "/*\n * Complete the 'getMaxProfit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction getMaxProfit(a) {\n    var maxProfit = -1\n    var buyPrice = 0\n    var sellPrice = 0\n    var changeBuyIndex = true\n    for(var i =0; i < a.length;i++) {\n        sellPrice = a[i+1]\n        if(changeBuyIndex) {\n            buyPrice = a[i]\n        }\n        if(sellPrice < buyPrice){\n            changeBuyIndex = true\n        } else {\n            var tempProfit = sellPrice - buyPrice\n            if(tempProfit > maxProfit) {\n                maxProfit = tempProfit\n            }\n            changeBuyIndex = false\n        }\n    }\n    return maxProfit\n}"
    }
},
{
    "test_id": "1533152",
    "candidate_test_id": "50536191",
    "question_1": {
        "score": "75/75",
        "code_language": "Typescript",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a: number[], k: number): number {\n    // Write your code here\n    var arr = [];\n    for(var i = 0; i< a.length; i++){\n        let number = a[i]\n        while(arr.length > 0 && number * arr[arr.length-1] <= k){\n            number = number * arr.pop()\n        }\n        arr.push(number)\n    }\nreturn arr.length\n}\n"
    },
    "question_2": {
        "score": "70/75",
        "code_language": "Typescript",
        "candidate_code": "'use strict';\n\nimport { WriteStream, createWriteStream } from \"fs\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString: string = '';\nlet inputLines: string[] = [];\nlet currentLine: number = 0;\n\nprocess.stdin.on('data', function(inputStdin: string): void {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function(): void {\n    inputLines = inputString.split('\\n');\n    inputString = '';\n\n    main();\n});\n\nfunction readLine(): string {\n    return inputLines[currentLine++];\n}\n\n/*\n * Complete the 'getMaxProfit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction getMaxProfit(a: number[]): number {\n    // Write your code here\n    var maxProfit = -1\n    var buyPrice =0\n    var sellPrice = 0\n    var changeBuyIndex = true\n    \n    for(var i = 0; i < a.length-1; i++){\n        sellPrice = a[i+1];\n        if(changeBuyIndex){\n            buyPrice = a[i]\n        }\n        if(sellPrice < buyPrice){\n            changeBuyIndex = true\n        }else {\n            var tempProfit = sellPrice - buyPrice\n            if(tempProfit > maxProfit){\n                maxProfit = tempProfit\n            }\n            changeBuyIndex = false\n        }\n    }\n    \n    return maxProfit\n    \n\n}function main() {\n    const ws: WriteStream = createWriteStream(process.env['OUTPUT_PATH']);\n\n    const aCount: number = parseInt(readLine().trim(), 10);\n\n    let a: number[] = [];\n\n    for (let i: number = 0; i < aCount; i++) {\n        const aItem: number = parseInt(readLine().trim(), 10);\n\n        a.push(aItem);\n    }\n\n    const result: number = getMaxProfit(a);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
    }
},

{
    "test_id": "1510939",
    "candidate_test_id": "49332717",
    "question_1": {
        "score": "0/75",
        "code_language": "Kotlin",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfun getMinLength(a: Array<Int>, k: Int): Int {\n    // Write your code here\n    var tempA = a;\n    var newTemp = ArrayList<Int>()\n    var sizeArr = 0\n    var tempResult = 0\n    var kTemp = 0\n    for(i in 0 until a.size) {\n        for(j in i until a.size-1) {\n            tempResult = a[i]+a[j]\n            var sem =(tempResult + kTemp)\n            if(sem <= k) {\n                newTemp.add(sem)\n                sizeArr += 1\n                kTemp = tempResult\n            } else {\n                break;\n            }\n        }\n    }\n    return newTemp.size\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Kotlin",
        "candidate_code": "\n/*\n * Complete the 'stringProblem' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfun stringProblem(s: String): Long {\n    // Write your code here\n    \n}\n"
    }
},
{
    "test_id": "1510939",
    "candidate_test_id": "49963842",
    "question_1": {
        "score": "0/75",
        "code_language": "Java8",
        "candidate_code": "\n/*\n * Complete the 'getMinLength' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n */\n\nfunction getMinLength(a, k) {\n    // Write your code here\n\n}\n"
    },
    "question_2": {
        "score": "0/100",
        "code_language": "Java8",
        "candidate_code": "\nclass Result {\n\n    /*\n     * Complete the 'stringProblem' function below.\n     *\n     * The function is expected to return a LONG_INTEGER.\n     * The function accepts STRING s as parameter.\n     */\n\n    public static long stringProblem(String s) {\n        int a = 0;\n        int i = 0;\n        int u = 0;\n        int e = 0;\n        int o = 0;\n        String vowel = \"\";\n        long result = 0;\n        \n        for (int x = 0; x < s.length(); x++) {\n            char c = s.charAt(x);\n            \n            if (c == 'a') {\n                a = a +1;\n                vowel = vowel + c;                \n            }\n            else if (c == 'e') {\n                vowel = vowel + c;\n            }\n            else if (c == 'i') {\n                vowel = vowel + c;\n            }\n            else if (c == 'o') {\n                vowel = vowel + c;\n            }\n            else if (c == 'u') {\n                vowel = vowel + c;\n            }\n            \n                                    \n            if (a > 1) {\n                result = a;\n            }\n            \n        }\n        return result;\n    }\n\n}\n"
    }
}
]
